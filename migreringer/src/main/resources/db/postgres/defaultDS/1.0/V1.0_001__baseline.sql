create table if not exists  ABAKUS_INNHENTING_LOGG(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
GRUNNLAG_UUID UUID NOT NULL,
AKTIV BOOLEAN DEFAULT false NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  AKSJONSPUNKT(ID BIGINT NOT NULL,
PERIODE_FOM DATE,
PERIODE_TOM DATE,
BEGRUNNELSE VARCHAR(4000),
TOTRINN_BEHANDLING BOOLEAN DEFAULT false NOT NULL,
BEHANDLING_STEG_FUNNET VARCHAR(100),
AKSJONSPUNKT_STATUS VARCHAR(100) NOT NULL,
AKSJONSPUNKT_DEF VARCHAR(100) NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
FRIST_TID TIMESTAMP(3),
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
VENT_AARSAK VARCHAR(100) DEFAULT '-' NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
MANUELT_OPPRETTET BOOLEAN DEFAULT false NOT NULL);

create table if not exists  BEHANDLING(ID BIGINT NOT NULL,
FAGSAK_ID BIGINT NOT NULL,
BEHANDLING_STATUS VARCHAR(100) NOT NULL,
BEHANDLING_TYPE VARCHAR(100) NOT NULL,
OPPRETTET_DATO TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP NOT NULL,
AVSLUTTET_DATO TIMESTAMP(0),
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
ANSVARLIG_SAKSBEHANDLER VARCHAR(100),
ANSVARLIG_BESLUTTER VARCHAR(100),
BEHANDLENDE_ENHET VARCHAR(10),
BEHANDLENDE_ENHET_NAVN VARCHAR(320),
BEHANDLENDE_ENHET_ARSAK VARCHAR(800),
BEHANDLINGSTID_FRIST DATE NOT NULL,
STARTPUNKT_TYPE VARCHAR(50) DEFAULT '-' NOT NULL,
SIST_OPPDATERT_TIDSPUNKT TIMESTAMP(3),
AAPNET_FOR_ENDRING BOOLEAN DEFAULT false NOT NULL,
TOTRINNSBEHANDLING BOOLEAN DEFAULT false NOT NULL,
UUID UUID,
MIGRERT_KILDE VARCHAR(100) DEFAULT '-' NOT NULL);

create table if not exists  BEHANDLING_ARSAK(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
BEHANDLING_ARSAK_TYPE VARCHAR(20) NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
ORIGINAL_BEHANDLING_ID BIGINT,
MANUELT_OPPRETTET BOOLEAN DEFAULT false NOT NULL);

create table if not exists  BEHANDLING_OVERLAPP_INFOTRYGD(ID BIGINT NOT NULL,
SAKSNUMMER VARCHAR(19) NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
VL_FOM DATE NOT NULL,
VL_TOM DATE NOT NULL,
INFOTRYGD_FOM DATE NOT NULL,
INFOTRYGD_TOM DATE,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BEHANDLING_RESULTAT(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
INNGANGSVILKAR_RESULTAT_ID BIGINT,
BEREGNING_RESULTAT_ID BIGINT,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
BEHANDLING_RESULTAT_TYPE VARCHAR(100) DEFAULT 'IKKE_FASTSATT' NOT NULL,
AVSLAG_ARSAK VARCHAR(100),
AVSLAG_ARSAK_FRITEKST VARCHAR(1500),
VEDTAKSBREV VARCHAR(100) NOT NULL,
OVERSKRIFT VARCHAR(200),
FRITEKSTBREV TEXT,
ENDRET_DEKNINGSGRAD BOOLEAN DEFAULT false NOT NULL,
ENDRET_STOENADSKONTO BOOLEAN DEFAULT false NOT NULL);

create table if not exists  BEHANDLING_RESULTAT_YT_KONSEK(ID BIGINT NOT NULL,
KONSEKVENS_YTELSE VARCHAR(100) NOT NULL,
BEHANDLING_RESULTAT_ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BEHANDLING_STEG_TILSTAND(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
BEHANDLING_STEG VARCHAR(100) NOT NULL,
BEHANDLING_STEG_STATUS VARCHAR(100) NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BEHANDLING_VEDTAK(ID BIGINT NOT NULL,
VEDTAK_DATO TIMESTAMP(3) NOT NULL,
ANSVARLIG_SAKSBEHANDLER VARCHAR(40) NOT NULL,
BEHANDLING_RESULTAT_ID BIGINT NOT NULL,
VEDTAK_RESULTAT_TYPE VARCHAR(100) NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
IVERKSETTING_STATUS VARCHAR(100) DEFAULT 'IKKE_IVERKSATT' NOT NULL,
BESLUTNING BOOLEAN DEFAULT false NOT NULL);

create table if not exists  BEREGNINGSGRUNNLAG(ID BIGINT NOT NULL,
SKJARINGSTIDSPUNKT DATE NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
REGELLOGG_SKJARINGSTIDSPUNKT TEXT,
REGELLOGG_BRUKERS_STATUS TEXT,
REGELINPUT_SKJARINGSTIDSPUNKT TEXT,
REGELINPUT_BRUKERS_STATUS TEXT,
GRUNNBELOEP NUMERIC(12,2),
REGELINPUT_PERIODISERING TEXT,
OVERSTYRT BOOLEAN DEFAULT false NOT NULL);

create table if not exists  BEREGNINGSGRUNNLAG_PERIODE(ID BIGINT NOT NULL,
BEREGNINGSGRUNNLAG_ID BIGINT NOT NULL,
BG_PERIODE_FOM DATE NOT NULL,
BG_PERIODE_TOM DATE,
BRUTTO_PR_AAR NUMERIC(19,2),
AVKORTET_PR_AAR NUMERIC(19,2),
REDUSERT_PR_AAR NUMERIC(19,2),
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
REGEL_EVALUERING TEXT,
REGEL_EVALUERING_FASTSETT TEXT,
REGEL_INPUT TEXT,
REGEL_INPUT_FASTSETT TEXT,
DAGSATS BIGINT,
REGEL_INPUT_FASTSETT_2 TEXT,
REGEL_EVALUERING_FASTSETT_2 TEXT,
REGEL_INPUT_VILKAR TEXT,
REGEL_EVALUERING_VILKAR TEXT,
REGEL_INPUT_OPPDATER_SVP TEXT,
REGEL_EVALUERING_OPPDATER_SVP TEXT);

create table if not exists  BG_AKTIVITET(ID BIGINT NOT NULL,
FOM DATE NOT NULL,
TOM DATE NOT NULL,
BG_AKTIVITETER_ID BIGINT NOT NULL,
OPPTJENING_AKTIVITET_TYPE VARCHAR(100) NOT NULL,
ARBEIDSGIVER_AKTOR_ID VARCHAR(100),
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
ARBEIDSGIVER_ORGNR VARCHAR(100),
ARBEIDSFORHOLD_INTERN_ID UUID);

create table if not exists  BG_AKTIVITET_OVERSTYRING(ID BIGINT NOT NULL,
BA_OVERSTYRINGER_ID BIGINT NOT NULL,
HANDLING_TYPE VARCHAR(100) NOT NULL,
OPPTJENING_AKTIVITET_TYPE VARCHAR(100) NOT NULL,
FOM DATE NOT NULL,
TOM DATE NOT NULL,
ARBEIDSGIVER_ORGNR VARCHAR(100),
ARBEIDSGIVER_AKTOR_ID VARCHAR(100),
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
ARBEIDSFORHOLD_INTERN_ID UUID);

create table if not exists  BG_AKTIVITET_OVERSTYRINGER(ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BG_AKTIVITET_STATUS(ID BIGINT NOT NULL,
BEREGNINGSGRUNNLAG_ID BIGINT NOT NULL,
AKTIVITET_STATUS VARCHAR(100) NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
HJEMMEL VARCHAR(100) DEFAULT '-' NOT NULL);

create table if not exists  BG_AKTIVITETER(ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
SKJARINGSTIDSPUNKT_OPPTJENING DATE NOT NULL);

create table if not exists  BG_ANDEL_ARBEIDSFORHOLD(ID BIGINT NOT NULL,
BG_ANDEL_ID BIGINT NOT NULL,
REFUSJONSKRAV_PR_AAR NUMERIC(19,2),
NATURALYTELSE_BORTFALT_PR_AAR NUMERIC(19,2),
NATURALYTELSE_TILKOMMET_PR_AAR NUMERIC(19,2),
TIDSBEGRENSET_ARBEIDSFORHOLD BOOLEAN DEFAULT false,
ARBEIDSPERIODE_FOM DATE,
ARBEIDSPERIODE_TOM DATE,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
ARBEIDSGIVER_AKTOR_ID VARCHAR(100),
LOENNSENDRING_I_PERIODEN BOOLEAN DEFAULT false,
ARBEIDSGIVER_ORGNR VARCHAR(100),
ARBEIDSFORHOLD_INTERN_ID UUID);

create table if not exists  BG_ARBEIDSTAKER_ANDEL(ID BIGINT NOT NULL,
BG_PR_STATUS_ANDEL_ID BIGINT NOT NULL,
MOTTAR_YTELSE BOOLEAN DEFAULT false,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BG_FAKTA_BER_TILFELLE(ID BIGINT NOT NULL,
FAKTA_BEREGNING_TILFELLE VARCHAR(100) NOT NULL,
BEREGNINGSGRUNNLAG_ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BG_FRILANS_ANDEL(ID BIGINT NOT NULL,
BG_PR_STATUS_ANDEL_ID BIGINT NOT NULL,
MOTTAR_YTELSE BOOLEAN DEFAULT false,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
NYOPPSTARTET BOOLEAN DEFAULT false NOT NULL);

create table if not exists  BG_PERIODE_AARSAK(ID BIGINT NOT NULL,
PERIODE_AARSAK VARCHAR(100) NOT NULL,
BG_PERIODE_ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BG_PERIODE_REGEL_SPORING(ID BIGINT NOT NULL,
BG_PERIODE_ID BIGINT NOT NULL,
REGEL_EVALUERING TEXT,
REGEL_INPUT TEXT,
REGEL_TYPE VARCHAR(100) NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BG_PR_STATUS_OG_ANDEL(ID BIGINT NOT NULL,
BG_PERIODE_ID BIGINT NOT NULL,
AKTIVITET_STATUS VARCHAR(100) NOT NULL,
BEREGNINGSPERIODE_FOM DATE,
BEREGNINGSPERIODE_TOM DATE,
BRUTTO_PR_AAR NUMERIC(19,2),
OVERSTYRT_PR_AAR NUMERIC(19,2),
AVKORTET_PR_AAR NUMERIC(19,2),
REDUSERT_PR_AAR NUMERIC(19,2),
BEREGNET_PR_AAR NUMERIC(19,2),
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
MAKSIMAL_REFUSJON_PR_AAR NUMERIC(19,2),
AVKORTET_REFUSJON_PR_AAR NUMERIC(19,2),
REDUSERT_REFUSJON_PR_AAR NUMERIC(19,2),
AVKORTET_BRUKERS_ANDEL_PR_AAR NUMERIC(19,2),
REDUSERT_BRUKERS_ANDEL_PR_AAR NUMERIC(19,2),
DAGSATS_BRUKER BIGINT,
DAGSATS_ARBEIDSGIVER BIGINT,
PGI_SNITT BIGINT,
PGI1 BIGINT,
PGI2 BIGINT,
PGI3 BIGINT,
AARSBELOEP_TILSTOETENDE_YTELSE BIGINT,
INNTEKTSKATEGORI VARCHAR(100) NOT NULL,
NY_I_ARBEIDSLIVET BOOLEAN,
ANDELSNR BIGINT NOT NULL,
ARBEIDSFORHOLD_TYPE VARCHAR(100) DEFAULT '-' NOT NULL,
BESTEBEREGNING_PR_AAR NUMERIC(19,2),
LAGT_TIL_AV_SAKSBEHANDLER BOOLEAN DEFAULT false NOT NULL,
DAGSATS_TILSTOETENDE_YTELSE BIGINT,
FORDELT_PR_AAR NUMERIC(19,2),
FASTSATT_AV_SAKSBEHANDLER BOOLEAN DEFAULT false NOT NULL);

create table if not exists  BG_REFUSJON_OVERSTYRING(ID BIGINT NOT NULL,
BR_OVERSTYRINGER_ID BIGINT NOT NULL,
ARBEIDSGIVER_ORGNR VARCHAR(100),
ARBEIDSGIVER_AKTOR_ID VARCHAR(100),
FOM DATE NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BG_REFUSJON_OVERSTYRINGER(ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BG_REGEL_SPORING(ID BIGINT NOT NULL,
BG_ID BIGINT NOT NULL,
REGEL_EVALUERING TEXT,
REGEL_INPUT TEXT,
REGEL_TYPE VARCHAR(100) NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BG_SG_PR_STATUS(ID BIGINT NOT NULL,
BEREGNINGSGRUNNLAG_ID BIGINT NOT NULL,
SAMMENLIGNINGSGRUNNLAG_TYPE VARCHAR(100) NOT NULL,
SAMMENLIGNINGSPERIODE_FOM DATE NOT NULL,
SAMMENLIGNINGSPERIODE_TOM DATE NOT NULL,
RAPPORTERT_PR_AAR NUMERIC(19,2) NOT NULL,
AVVIK_PROMILLE BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BR_ANDEL(ID BIGINT NOT NULL,
BR_PERIODE_ID BIGINT NOT NULL,
DAGSATS BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
STILLINGSPROSENT NUMERIC(5,2) NOT NULL,
UTBETALINGSGRAD NUMERIC(5,2) NOT NULL,
DAGSATS_FRA_BG BIGINT NOT NULL,
AKTIVITET_STATUS VARCHAR(100),
INNTEKTSKATEGORI VARCHAR(100) NOT NULL,
ARBEIDSFORHOLD_TYPE VARCHAR(100) DEFAULT '-' NOT NULL,
BRUKER_ER_MOTTAKER BOOLEAN DEFAULT false NOT NULL,
ARBEIDSGIVER_AKTOR_ID VARCHAR(100),
ARBEIDSGIVER_ORGNR VARCHAR(100),
ARBEIDSFORHOLD_INTERN_ID UUID);

create table if not exists  BR_BEREGNINGSRESULTAT(ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
REGEL_INPUT TEXT NOT NULL,
REGEL_SPORING TEXT NOT NULL,
ENDRINGSDATO DATE);

create table if not exists  BR_FERIEPENGER(ID BIGINT NOT NULL,
BEREGNINGSRESULTAT_FP_ID BIGINT NOT NULL,
FERIEPENGER_REGEL_INPUT TEXT NOT NULL,
FERIEPENGER_REGEL_SPORING TEXT NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
VERSJON BIGINT DEFAULT 0 NOT NULL,
FERIEPENGER_PERIODE_TOM DATE,
FERIEPENGER_PERIODE_FOM DATE);

create table if not exists  BR_FERIEPENGER_PR_AAR(ID BIGINT NOT NULL,
BR_FERIEPENGER_ID BIGINT NOT NULL,
BEREGNINGSRESULTAT_ANDEL_ID BIGINT NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPTJENINGSAAR DATE NOT NULL,
AARSBELOEP BIGINT NOT NULL);

create table if not exists  BR_PERIODE(ID BIGINT NOT NULL,
BEREGNINGSRESULTAT_FP_ID BIGINT NOT NULL,
BR_PERIODE_FOM DATE NOT NULL,
BR_PERIODE_TOM DATE NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BR_RESULTAT_BEHANDLING(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
AKTIV BOOLEAN DEFAULT false NOT NULL,
BG_BEREGNINGSRESULTAT_FP_ID BIGINT NOT NULL,
UTBET_BEREGNINGSRESULTAT_FP_ID BIGINT,
HINDRE_TILBAKETREKK BOOLEAN DEFAULT false NOT NULL);

create table if not exists  BR_SATS(ID BIGINT NOT NULL,
SATS_TYPE VARCHAR(100) NOT NULL,
FOM DATE NOT NULL,
TOM DATE NOT NULL,
VERDI NUMERIC(10,0) NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  BRUKER(ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
SPRAK_KODE VARCHAR(100) DEFAULT 'NB' NOT NULL,
AKTOER_ID VARCHAR(50));

create table if not exists  ETTERKONTROLL(ID BIGINT NOT NULL,
FAGSAK_ID BIGINT NOT NULL,
KONTROLL_TYPE VARCHAR(100) NOT NULL,
BEHANDLET BOOLEAN DEFAULT false NOT NULL,
KONTROLL_TID TIMESTAMP(3) NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  FAGSAK(ID BIGINT NOT NULL,
FAGSAK_STATUS VARCHAR(100) NOT NULL,
BRUKER_ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
YTELSE_TYPE VARCHAR(100),
SAKSNUMMER VARCHAR(19),
TIL_INFOTRYGD BOOLEAN DEFAULT false NOT NULL);

create table if not exists  FAGSAK_PROSESS_TASK(ID BIGINT NOT NULL,
FAGSAK_ID BIGINT NOT NULL,
PROSESS_TASK_ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
GRUPPE_SEKVENSNR BIGINT);

create table if not exists  GR_BEREGNINGSGRUNNLAG(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
BEREGNINGSGRUNNLAG_ID BIGINT,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
STEG_OPPRETTET VARCHAR(100) DEFAULT ('-') NOT NULL,
AKTIV BOOLEAN DEFAULT false NOT NULL,
REGISTER_AKTIVITETER_ID BIGINT,
SAKSBEHANDLET_AKTIVITETER_ID BIGINT,
BA_OVERSTYRINGER_ID BIGINT,
BR_OVERSTYRINGER_ID BIGINT);

create table if not exists  GR_MEDLEMSKAP(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
REGISTRERT_ID BIGINT,
OPPGITT_ID BIGINT,
VURDERING_ID BIGINT,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
AKTIV BOOLEAN DEFAULT false NOT NULL,
VURDERING_LOPENDE_ID BIGINT);

create table if not exists  GR_MEDLEMSKAP_VILKAR_PERIODE(ID BIGINT NOT NULL,
VILKAR_RESULTAT_ID BIGINT NOT NULL,
MEDLEMSKAP_VILKAR_PERIODE_ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
AKTIV BOOLEAN DEFAULT false NOT NULL);

create table if not exists  GR_PERSONOPPLYSNING(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
REGISTRERT_INFORMASJON_ID BIGINT,
OVERSTYRT_INFORMASJON_ID BIGINT,
AKTIV BOOLEAN DEFAULT false NOT NULL);

create table if not exists  GR_SOEKNAD(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
SOEKNAD_ID BIGINT NOT NULL,
AKTIV BOOLEAN DEFAULT false NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  HISTORIKKINNSLAG(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT,
HISTORIKK_AKTOER_ID VARCHAR(100) NOT NULL,
HISTORIKKINNSLAG_TYPE VARCHAR(100) NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
FAGSAK_ID BIGINT NOT NULL,
BRUKER_KJOENN VARCHAR(100),
UUID UUID,
HISTORIKK_TID TIMESTAMP(3),
OPPRETTET_I_SYSTEM VARCHAR(20));

create table if not exists  HISTORIKKINNSLAG_DEL(ID BIGINT NOT NULL,
HISTORIKKINNSLAG_ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  HISTORIKKINNSLAG_DOK_LINK(ID BIGINT NOT NULL,
LINK_TEKST VARCHAR(100) NOT NULL,
HISTORIKKINNSLAG_ID BIGINT NOT NULL,
JOURNALPOST_ID VARCHAR(100),
DOKUMENT_ID VARCHAR(100),
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  HISTORIKKINNSLAG_FELT(ID BIGINT NOT NULL,
HISTORIKKINNSLAG_DEL_ID BIGINT NOT NULL,
HISTORIKKINNSLAG_FELT_TYPE VARCHAR(100) NOT NULL,
NAVN VARCHAR(100),
KL_NAVN VARCHAR(100),
NAVN_VERDI VARCHAR(4000),
FRA_VERDI VARCHAR(4000),
TIL_VERDI VARCHAR(4000),
SEKVENS_NR INT,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
FRA_VERDI_KODE VARCHAR(100),
TIL_VERDI_KODE VARCHAR(100),
KL_FRA_VERDI VARCHAR(100),
KL_TIL_VERDI VARCHAR(100));

create table if not exists  JOURNALPOST(ID BIGINT NOT NULL,
FAGSAK_ID BIGINT NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
JOURNALPOST_ID VARCHAR(20) NOT NULL);

create table if not exists  LAGRET_VEDTAK(ID BIGINT NOT NULL,
FAGSAK_ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
XML_CLOB TEXT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  MEDLEMSKAP_OPPG_LAND(ID BIGINT NOT NULL,
LAND VARCHAR(100) NOT NULL,
PERIODE_FOM DATE NOT NULL,
PERIODE_TOM DATE NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
TIDLIGERE_OPPHOLD BOOLEAN DEFAULT false NOT NULL,
MEDLEMSKAP_OPPG_TILKNYT_ID BIGINT NOT NULL);

create table if not exists  MEDLEMSKAP_OPPG_TILKNYT(ID BIGINT NOT NULL,
OPPHOLD_NAA BOOLEAN DEFAULT false NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
OPPGITT_DATO DATE NOT NULL);

create table if not exists  MEDLEMSKAP_PERIODER(ID BIGINT NOT NULL,
FOM DATE,
TOM DATE,
MEDLEMSKAP_TYPE VARCHAR(100) NOT NULL,
DEKNING_TYPE VARCHAR(100) NOT NULL,
KILDE_TYPE VARCHAR(100) NOT NULL,
BESLUTNINGSDATO DATE,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
ER_MEDLEM BOOLEAN DEFAULT false NOT NULL,
LOVVALG_LAND VARCHAR(100) NOT NULL,
STUDIE_LAND VARCHAR(100) NOT NULL,
MEDL_ID BIGINT,
MEDLEMSKAP_REGISTRERT_ID BIGINT);

create table if not exists  MEDLEMSKAP_REGISTRERT(ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  MEDLEMSKAP_VILKAR_PERIODE(ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
OVERSTYRINGSDATO DATE,
OVERSTYRT_UTFALL VARCHAR(100) DEFAULT '-' NOT NULL,
AVSLAGSARSAK VARCHAR(100) DEFAULT '-' NOT NULL);

create table if not exists  MEDLEMSKAP_VILKAR_PERIODER(ID BIGINT NOT NULL,
FOM DATE NOT NULL,
TOM DATE,
VILKAR_UTFALL VARCHAR(100) NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
MEDLEMSKAP_VILKAR_PERIODE_ID BIGINT NOT NULL,
VURDERINGSDATO DATE,
VILKAR_UTFALL_MERKNAD VARCHAR(100) DEFAULT '-');

create table if not exists  MEDLEMSKAP_VURDERING(ID BIGINT NOT NULL,
OPPHOLDSRETT_VURDERING BOOLEAN,
LOVLIG_OPPHOLD_VURDERING BOOLEAN,
BOSATT_VURDERING BOOLEAN,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
MEDLEMSPERIODE_MANUELL_VURD VARCHAR(100) NOT NULL,
ER_EOS_BORGER BOOLEAN,
FOM DATE,
BEGRUNNELSE VARCHAR(2000));

create table if not exists  MEDLEMSKAP_VURDERING_LOPENDE(ID BIGINT NOT NULL,
VURDERT_PERIODE_ID BIGINT NOT NULL,
OPPHOLDSRETT_VURDERING BOOLEAN,
LOVLIG_OPPHOLD_VURDERING BOOLEAN,
BOSATT_VURDERING BOOLEAN,
ER_EOS_BORGER BOOLEAN,
VURDERINGSDATO DATE NOT NULL,
MANUELL_VURD VARCHAR(100),
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
BEGRUNNELSE VARCHAR(2000));

create table if not exists  MEDLEMSKAP_VURDERING_PERIODE(ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  MOTTATT_DOKUMENT(ID BIGINT NOT NULL,
JOURNALPOST_ID VARCHAR(20),
TYPE VARCHAR(100) NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
BEHANDLING_ID BIGINT,
MOTTATT_DATO DATE,
ELEKTRONISK_REGISTRERT BOOLEAN DEFAULT false NOT NULL,
FAGSAK_ID BIGINT NOT NULL,
FORSENDELSE_ID UUID,
XML_PAYLOAD TEXT,
DOKUMENT_KATEGORI VARCHAR(100) NOT NULL,
JOURNAL_ENHET VARCHAR(10),
MOTTATT_TIDSPUNKT TIMESTAMP(3),
KANALREFERANSE VARCHAR(100));

create table if not exists  MOTTATT_HENDELSE(HENDELSE_UID VARCHAR(100) NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  OPPDRAG_KONTROLL(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
VENTER_KVITTERING BOOLEAN DEFAULT false NOT NULL,
PROSESS_TASK_ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
SAKSNUMMER VARCHAR(19) NOT NULL);

create table if not exists  OPPGAVE_BEHANDLING_KOBLING(ID BIGINT NOT NULL,
OPPGAVE_AARSAK VARCHAR(100) NOT NULL,
OPPGAVE_ID VARCHAR(50),
BEHANDLING_ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
FERDIGSTILT BOOLEAN DEFAULT false NOT NULL,
FERDIGSTILT_AV VARCHAR(20),
FERDIGSTILT_TID TIMESTAMP(3),
SAKSNUMMER VARCHAR(19) NOT NULL);

create table if not exists  OPPTJENING(ID BIGINT NOT NULL,
VILKAR_RESULTAT_ID BIGINT NOT NULL,
FOM DATE NOT NULL,
TOM DATE NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
OPPTJENT_PERIODE VARCHAR(50),
AKTIV BOOLEAN DEFAULT false NOT NULL);

create table if not exists  OPPTJENING_AKTIVITET(ID BIGINT NOT NULL,
FOM DATE NOT NULL,
TOM DATE NOT NULL,
OPPTJENINGSPERIODE_ID BIGINT NOT NULL,
AKTIVITET_TYPE VARCHAR(100) NOT NULL,
AKTIVITET_REFERANSE VARCHAR(1000),
KLASSIFISERING VARCHAR(100) NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
REFERANSE_TYPE VARCHAR(100));

create table if not exists  PO_ADRESSE(ID BIGINT NOT NULL,
FOM DATE NOT NULL,
TOM DATE NOT NULL,
ADRESSELINJE1 VARCHAR(40),
ADRESSELINJE2 VARCHAR(40),
ADRESSELINJE3 VARCHAR(40),
ADRESSELINJE4 VARCHAR(40),
POSTNUMMER VARCHAR(20),
POSTSTED VARCHAR(40),
LAND VARCHAR(40),
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
PO_INFORMASJON_ID BIGINT NOT NULL,
ADRESSE_TYPE VARCHAR(100) NOT NULL,
AKTOER_ID VARCHAR(50));

create table if not exists  PO_INFORMASJON(ID BIGINT NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  PO_PERSONOPPLYSNING(ID BIGINT NOT NULL,
NAVN VARCHAR(100),
FOEDSELSDATO DATE NOT NULL,
DOEDSDATO DATE,
BRUKER_KJOENN VARCHAR(100),
SIVILSTAND_TYPE VARCHAR(100) NOT NULL,
REGION VARCHAR(100) NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
PO_INFORMASJON_ID BIGINT NOT NULL,
AKTOER_ID VARCHAR(50));

create table if not exists  PO_PERSONSTATUS(ID BIGINT NOT NULL,
FOM DATE NOT NULL,
TOM DATE NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
PO_INFORMASJON_ID BIGINT NOT NULL,
PERSONSTATUS VARCHAR(100) NOT NULL,
AKTOER_ID VARCHAR(50));

create table if not exists  PO_RELASJON(ID BIGINT NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
PO_INFORMASJON_ID BIGINT NOT NULL,
RELASJONSROLLE VARCHAR(100) NOT NULL,
HAR_SAMME_BOSTED BOOLEAN DEFAULT false,
FRA_AKTOER_ID VARCHAR(50),
TIL_AKTOER_ID VARCHAR(50));

create table if not exists  PO_STATSBORGERSKAP(ID BIGINT NOT NULL,
FOM DATE NOT NULL,
TOM DATE NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
PO_INFORMASJON_ID BIGINT NOT NULL,
STATSBORGERSKAP VARCHAR(100) NOT NULL,
AKTOER_ID VARCHAR(50));

create table if not exists  PROSESS_TASK(ID BIGINT NOT NULL,
TASK_TYPE VARCHAR(50) NOT NULL,
PRIORITET SMALLINT DEFAULT 0 NOT NULL,
STATUS VARCHAR(20) DEFAULT 'KLAR' NOT NULL,
TASK_PARAMETERE VARCHAR(4000),
TASK_PAYLOAD TEXT,
TASK_GRUPPE VARCHAR(250),
TASK_SEKVENS VARCHAR(100) DEFAULT '1' NOT NULL,
PARTITION_KEY             VARCHAR(4)    DEFAULT to_char(current_date, 'MM'),
NESTE_KJOERING_ETTER TIMESTAMP(0) DEFAULT current_timestamp,
FEILEDE_FORSOEK INT DEFAULT 0,
SISTE_KJOERING_TS TIMESTAMP(6),
SISTE_KJOERING_FEIL_KODE VARCHAR(50),
SISTE_KJOERING_FEIL_TEKST TEXT,
SISTE_KJOERING_SERVER VARCHAR(50),
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP NOT NULL,
BLOKKERT_AV BIGINT,
SISTE_KJOERING_SLUTT_TS TIMESTAMP(6),
SISTE_KJOERING_PLUKK_TS TIMESTAMP(6)) PARTITION BY LIST (STATUS);;

create table if not exists  PROSESS_TASK_FEILHAND(KODE VARCHAR(20) NOT NULL,
NAVN VARCHAR(50) NOT NULL,
BESKRIVELSE VARCHAR(2000),
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
INPUT_VARIABEL1 NUMERIC,
INPUT_VARIABEL2 NUMERIC);

create table if not exists  PROSESS_TASK_TYPE(KODE VARCHAR(50) NOT NULL,
NAVN VARCHAR(50),
FEIL_MAKS_FORSOEK NUMERIC(10,0) DEFAULT 1 NOT NULL,
FEIL_SEK_MELLOM_FORSOEK NUMERIC(10,0) DEFAULT 30 NOT NULL,
FEILHANDTERING_ALGORITME VARCHAR(20) DEFAULT 'DEFAULT',
BESKRIVELSE VARCHAR(2000),
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
CRON_EXPRESSION VARCHAR(200));

create table if not exists  RISIKOKLASSIFISERING(BEHANDLING_ID BIGINT NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
ID BIGINT NOT NULL,
KONTROLL_RESULTAT VARCHAR(100) DEFAULT ('-') NOT NULL,
FARESIGNAL_VURDERING VARCHAR(100) DEFAULT ('-') NOT NULL,
ERAKTIV BOOLEAN DEFAULT false NOT NULL);

create table if not exists  SAMMENLIGNINGSGRUNNLAG(ID BIGINT NOT NULL,
BEREGNINGSGRUNNLAG_ID BIGINT NOT NULL,
SAMMENLIGNINGSPERIODE_FOM DATE NOT NULL,
SAMMENLIGNINGSPERIODE_TOM DATE NOT NULL,
RAPPORTERT_PR_AAR NUMERIC(19,2) NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
AVVIK_PROMILLE BIGINT NOT NULL);

create table if not exists  SO_SOEKNAD(ID BIGINT NOT NULL,
SOEKNADSDATO DATE NOT NULL,
TILLEGGSOPPLYSNINGER VARCHAR(4000),
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
ELEKTRONISK_REGISTRERT BOOLEAN DEFAULT false NOT NULL,
MOTTATT_DATO DATE,
BEGRUNNELSE_FOR_SEN_INNSENDING VARCHAR(2000),
ER_ENDRINGSSOEKNAD BOOLEAN DEFAULT false NOT NULL,
BRUKER_ROLLE VARCHAR(100) DEFAULT '-' NOT NULL,
SPRAK_KODE VARCHAR(100) DEFAULT 'NB' NOT NULL);

create table if not exists  SOEKNAD_VEDLEGG(ID BIGINT NOT NULL,
SKJEMANUMMER VARCHAR(20),
TILLEGGSINFO VARCHAR(2000),
INNSENDINGSVALG VARCHAR(100) NOT NULL,
SOEKNAD_ID BIGINT NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
VEDLEGG_PAKREVD BOOLEAN DEFAULT false NOT NULL);

create table if not exists  TILBAKEKREVING_INNTREKK(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
AKTIV BOOLEAN DEFAULT false NOT NULL,
AVSLAATT_INNTREKK BOOLEAN DEFAULT false NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  TILBAKEKREVING_VALG(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
AKTIV BOOLEAN DEFAULT false NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
TBK_VILKAAR_OPPFYLT BOOLEAN DEFAULT false,
GRUNN_TIL_REDUKSJON BOOLEAN DEFAULT false,
VIDERE_BEHANDLING VARCHAR(100) NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
VARSELTEKST VARCHAR(3000));

create table if not exists  TOTRINNRESULTATGRUNNLAG(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
INNTEKT_ARBEID_GRUNNLAG_ID BIGINT,
YTELSES_FORDELING_GRUNNLAG_ID BIGINT,
UTTAK_RESULTAT_ID BIGINT,
BEREGNINGSGRUNNLAG_ID BIGINT,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
AKTIV BOOLEAN DEFAULT false NOT NULL,
IAY_GRUNNLAG_UUID UUID);

create table if not exists  TOTRINNSVURDERING(ID BIGINT NOT NULL,
BEHANDLING_ID BIGINT NOT NULL,
AKSJONSPUNKT_DEF VARCHAR(100) NOT NULL,
GODKJENT BOOLEAN DEFAULT false NOT NULL,
BEGRUNNELSE VARCHAR(4000),
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
AKTIV BOOLEAN DEFAULT false NOT NULL);

create table if not exists  UTTAK_RESULTAT(ID BIGINT NOT NULL,
BEHANDLING_RESULTAT_ID BIGINT NOT NULL,
OPPRINNELIG_PERIODER_ID BIGINT,
OVERSTYRT_PERIODER_ID BIGINT,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
AKTIV BOOLEAN DEFAULT false NOT NULL);

create table if not exists  UTTAK_RESULTAT_PERIODE(ID BIGINT NOT NULL,
UTTAK_RESULTAT_PERIODER_ID BIGINT NOT NULL,
PERIODE_RESULTAT_TYPE VARCHAR(100) NOT NULL,
PERIODE_RESULTAT_AARSAK VARCHAR(100) NOT NULL,
BEGRUNNELSE VARCHAR(4000),
KL_PERIODE_RESULTAT_AARSAK VARCHAR(100) NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
FLERBARNSDAGER BOOLEAN DEFAULT false NOT NULL,
GRADERING_INNVILGET BOOLEAN DEFAULT false NOT NULL,
MANUELT_BEHANDLET BOOLEAN DEFAULT false NOT NULL,
SAMTIDIG_UTTAK BOOLEAN DEFAULT false NOT NULL,
FOM DATE NOT NULL,
TOM DATE NOT NULL,
SAMTIDIG_UTTAKSPROSENT NUMERIC(5,2),
OPPHOLD_AARSAK VARCHAR(100) DEFAULT '-' NOT NULL,
OVERFOERING_AARSAK VARCHAR(100) DEFAULT '-' NOT NULL);

create table if not exists  UTTAK_RESULTAT_PERIODER(ID BIGINT NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create table if not exists  VILKAR(ID BIGINT NOT NULL,
VILKAR_RESULTAT_ID BIGINT NOT NULL,
VILKAR_UTFALL VARCHAR(100) NOT NULL,
VILKAR_TYPE VARCHAR(100) NOT NULL,
VILKAR_UTFALL_MERKNAD VARCHAR(100) NOT NULL,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
AVSLAG_KODE VARCHAR(100),
MERKNAD_PARAMETERE VARCHAR(1000),
REGEL_EVALUERING TEXT,
REGEL_INPUT TEXT,
VILKAR_UTFALL_MANUELL VARCHAR(100) DEFAULT '-' NOT NULL,
VILKAR_UTFALL_OVERSTYRT VARCHAR(100) DEFAULT '-' NOT NULL);

create table if not exists  VILKAR_RESULTAT(ID BIGINT NOT NULL,
VILKAR_RESULTAT VARCHAR(100) DEFAULT 'IKKE_FASTSATT' NOT NULL,
ORIGINAL_BEHANDLING_ID BIGINT,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
OVERSTYRT BOOLEAN DEFAULT false NOT NULL);

create table if not exists  VIRKSOMHET(ID BIGINT NOT NULL,
ORGNR VARCHAR(100) NOT NULL,
NAVN VARCHAR(400),
REGISTRERT DATE,
OPPSTART DATE,
AVSLUTTET DATE,
VERSJON BIGINT DEFAULT 0 NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3),
OPPLYSNINGER_OPPDATERT_TID TIMESTAMP(3) DEFAULT NULL NOT NULL,
ORGANISASJONSTYPE VARCHAR(100) DEFAULT '-' NOT NULL);

create table if not exists  VURDER_AARSAK_TTVURDERING(ID BIGINT NOT NULL,
AARSAK_TYPE VARCHAR(100) NOT NULL,
TOTRINNSVURDERING_ID BIGINT NOT NULL,
OPPRETTET_AV VARCHAR(20) DEFAULT 'VL' NOT NULL,
OPPRETTET_TID TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP NOT NULL,
ENDRET_AV VARCHAR(20),
ENDRET_TID TIMESTAMP(3));

create  index IDX_ABAKUS_INN_LOGG_01 on ABAKUS_INNHENTING_LOGG (BEHANDLING_ID);
create  index IDX_ABAKUS_INN_LOGG_02 on ABAKUS_INNHENTING_LOGG (GRUNNLAG_UUID);
create  index IDX_AKSJONSPUNKT_6 on AKSJONSPUNKT (BEHANDLING_STEG_FUNNET);
create  index IDX_AKSJONSPUNKT_7 on AKSJONSPUNKT (AKSJONSPUNKT_DEF);
create  index IDX_AKSJONSPUNKT_8 on AKSJONSPUNKT (VENT_AARSAK);
create  index IDX_AKSJONSPUNKT_9 on AKSJONSPUNKT (AKSJONSPUNKT_STATUS);
create  index IDX_BA_OVERSTYRING_01 on BG_AKTIVITET_OVERSTYRING (BA_OVERSTYRINGER_ID);
create  index IDX_BA_OVERSTYRING_02 on BG_AKTIVITET_OVERSTYRING (ARBEIDSGIVER_ORGNR);
create  index IDX_BEH_OVERLAPP_INFOTRYGD_01 on BEHANDLING_OVERLAPP_INFOTRYGD (BEHANDLING_ID);
create  index IDX_BEHANDLING_1 on BEHANDLING (FAGSAK_ID);
create  index IDX_BEHANDLING_2 on BEHANDLING (BEHANDLING_STATUS);
create  index IDX_BEHANDLING_3 on BEHANDLING (BEHANDLING_TYPE);
create  index IDX_BEHANDLING_6 on BEHANDLING (STARTPUNKT_TYPE);
create  index IDX_BEHANDLING_ARSAK_6 on BEHANDLING_ARSAK (BEHANDLING_ID);
create  index IDX_BEHANDLING_ARSAK_7 on BEHANDLING_ARSAK (ORIGINAL_BEHANDLING_ID);
create  index IDX_BEHANDLING_RESULTAT_1 on BEHANDLING_RESULTAT (INNGANGSVILKAR_RESULTAT_ID);
create  index IDX_BEHANDLING_RESULTAT_2 on BEHANDLING_RESULTAT (BEREGNING_RESULTAT_ID);
create  index IDX_BEHANDLING_RESULTAT_3 on BEHANDLING_RESULTAT (BEHANDLING_ID);
create  index IDX_BEHANDLING_RESULTAT_4 on BEHANDLING_RESULTAT (BEHANDLING_RESULTAT_TYPE);
create  index IDX_BEHANDLING_RESULTAT_6 on BEHANDLING_RESULTAT (AVSLAG_ARSAK);
create  index IDX_BEHANDLING_STEG_TILSTAND_1 on BEHANDLING_STEG_TILSTAND (BEHANDLING_STEG);
create  index IDX_BEHANDLING_STEG_TILSTAND_6 on BEHANDLING_STEG_TILSTAND (BEHANDLING_ID);
create  index IDX_BEHANDLING_STEG_TILSTAND_7 on BEHANDLING_STEG_TILSTAND (BEHANDLING_STEG_STATUS);
create  index IDX_BEHANDLING_VEDTAK_6 on BEHANDLING_VEDTAK (IVERKSETTING_STATUS);
create  index IDX_BEREGNINGSGRUNNLAG_02 on BEREGNINGSGRUNNLAG (SKJARINGSTIDSPUNKT);
create  index IDX_BEREGNINGSRES_ANDEL_11 on BR_ANDEL (ARBEIDSFORHOLD_INTERN_ID);
create  index IDX_BEREGNINGSRESULTAT_ANDEL_2 on BR_ANDEL (AKTIVITET_STATUS);
create  index IDX_BEREGNINGSRESULTAT_ANDEL_7 on BR_ANDEL (ARBEIDSGIVER_ORGNR);
create  index IDX_BG_AKTIV_OVERSTYRING_11 on BG_AKTIVITET_OVERSTYRING (ARBEIDSFORHOLD_INTERN_ID);
create  index IDX_BG_AKTIVITET_01 on BG_AKTIVITET (BG_AKTIVITETER_ID);
create  index IDX_BG_AKTIVITET_04 on BG_AKTIVITET (ARBEIDSGIVER_ORGNR);
create  index IDX_BG_AKTIVITET_11 on BG_AKTIVITET (ARBEIDSFORHOLD_INTERN_ID);
create  index IDX_BG_AKTIVITET_STATUS_01 on BG_AKTIVITET_STATUS (BEREGNINGSGRUNNLAG_ID);
create  index IDX_BG_AKTIVITET_STATUS_02 on BG_AKTIVITET_STATUS (AKTIVITET_STATUS);
create  index IDX_BG_AKTIVITET_STATUS_03 on BG_AKTIVITET_STATUS (HJEMMEL);
create  index IDX_BG_ANDEL_ARBEIDSFORHOLD_01 on BG_ANDEL_ARBEIDSFORHOLD (BG_ANDEL_ID);
create  index IDX_BG_ANDEL_ARBEIDSFORHOLD_03 on BG_ANDEL_ARBEIDSFORHOLD (ARBEIDSGIVER_ORGNR);
create  index IDX_BG_ANDEL_ARBEIDSFORHOLD_11 on BG_ANDEL_ARBEIDSFORHOLD (ARBEIDSFORHOLD_INTERN_ID);
create  index IDX_BG_ARBEIDSTAKER_ANDEL on BG_ARBEIDSTAKER_ANDEL (BG_PR_STATUS_ANDEL_ID);
create  index IDX_BG_FAKTA_BER_TILFELLE_1 on BG_FAKTA_BER_TILFELLE (BEREGNINGSGRUNNLAG_ID);
create  index IDX_BG_FRILANS_ANDEL on BG_FRILANS_ANDEL (BG_PR_STATUS_ANDEL_ID);
create  index IDX_BG_PERIODE_01 on BEREGNINGSGRUNNLAG_PERIODE (BEREGNINGSGRUNNLAG_ID);
create  index IDX_BG_PERIODE_02 on BEREGNINGSGRUNNLAG_PERIODE (BG_PERIODE_FOM);
create  index IDX_BG_PERIODE_03 on BEREGNINGSGRUNNLAG_PERIODE (BG_PERIODE_TOM);
create  index IDX_BG_PERIODE_AARSAK_1 on BG_PERIODE_AARSAK (BG_PERIODE_ID);
create  index IDX_BG_PERIODE_RS_01 on BG_PERIODE_REGEL_SPORING (BG_PERIODE_ID);
create  index IDX_BG_PERIODE_RS_02 on BG_PERIODE_REGEL_SPORING (REGEL_TYPE);
create  index IDX_BG_PR_STATUS_OG_ANDEL_01 on BG_PR_STATUS_OG_ANDEL (BG_PERIODE_ID);
create  index IDX_BG_PR_STATUS_OG_ANDEL_02 on BG_PR_STATUS_OG_ANDEL (AKTIVITET_STATUS);
create  index IDX_BG_RS_01 on BG_REGEL_SPORING (BG_ID);
create  index IDX_BG_RS_02 on BG_REGEL_SPORING (REGEL_TYPE);
create  index IDX_BG_SG_PR_STATUS_01 on BG_SG_PR_STATUS (BEREGNINGSGRUNNLAG_ID);
create  index IDX_BR_ANDEL_01 on BR_ANDEL (BR_PERIODE_ID);
create  index IDX_BR_FERIEPENGER_1 on BR_FERIEPENGER (BEREGNINGSRESULTAT_FP_ID);
create  index IDX_BR_FERIEPENGER_PR_AAR_1 on BR_FERIEPENGER_PR_AAR (BR_FERIEPENGER_ID);
create  index IDX_BR_FERIEPENGER_PR_AAR_2 on BR_FERIEPENGER_PR_AAR (BEREGNINGSRESULTAT_ANDEL_ID);
create  index IDX_BR_KONSEKVENS_YTELSE_1 on BEHANDLING_RESULTAT_YT_KONSEK (BEHANDLING_RESULTAT_ID);
create  index IDX_BR_OVERSTYRING_01 on BG_REFUSJON_OVERSTYRING (BR_OVERSTYRINGER_ID);
create  index IDX_BR_OVERSTYRING_02 on BG_REFUSJON_OVERSTYRING (ARBEIDSGIVER_ORGNR);
create  index IDX_BR_OVERSTYRING_03 on BG_REFUSJON_OVERSTYRING (ARBEIDSGIVER_AKTOR_ID);
create  index IDX_BR_PERIODE_01 on BR_PERIODE (BEREGNINGSRESULTAT_FP_ID);
create  index IDX_BR_PERIODE_02 on BR_PERIODE (BR_PERIODE_FOM);
create  index IDX_BR_PERIODE_03 on BR_PERIODE (BR_PERIODE_TOM);
create  index IDX_BRUKER_6 on BRUKER (SPRAK_KODE);
create  index IDX_ETTERKONTROLL_2 on ETTERKONTROLL (KONTROLL_TYPE);
create  index IDX_FAGSAK_1 on FAGSAK (FAGSAK_STATUS);
create  index IDX_FAGSAK_3 on FAGSAK (BRUKER_ID);
create  index IDX_FAGSAK_7 on FAGSAK (YTELSE_TYPE);
create  index IDX_FAGSAK_PROSESS_TASK_1 on FAGSAK_PROSESS_TASK (FAGSAK_ID);
create  index IDX_FAGSAK_PROSESS_TASK_2 on FAGSAK_PROSESS_TASK (PROSESS_TASK_ID);
create  index IDX_FAGSAK_PROSESS_TASK_3 on FAGSAK_PROSESS_TASK (BEHANDLING_ID);
create  index IDX_FAGSAK_PROSESS_TASK_4 on FAGSAK_PROSESS_TASK (GRUPPE_SEKVENSNR);
create  index IDX_GR_BEREGNINGSGRUNNLAG_02 on GR_BEREGNINGSGRUNNLAG (REGISTER_AKTIVITETER_ID);
create  index IDX_GR_BEREGNINGSGRUNNLAG_03 on GR_BEREGNINGSGRUNNLAG (SAKSBEHANDLET_AKTIVITETER_ID);
create  index IDX_GR_BEREGNINGSGRUNNLAG_04 on GR_BEREGNINGSGRUNNLAG (BA_OVERSTYRINGER_ID);
create  index IDX_GR_BEREGNINGSGRUNNLAG_05 on GR_BEREGNINGSGRUNNLAG (BR_OVERSTYRINGER_ID);
create  index IDX_GR_BEREGNINGSGRUNNLAG_6 on GR_BEREGNINGSGRUNNLAG (BEHANDLING_ID);
create  index IDX_GR_BEREGNINGSGRUNNLAG_7 on GR_BEREGNINGSGRUNNLAG (BEREGNINGSGRUNNLAG_ID);
create  index IDX_GR_MEDLEMSKAP_01 on GR_MEDLEMSKAP (BEHANDLING_ID);
create  index IDX_GR_MEDLEMSKAP_02 on GR_MEDLEMSKAP (REGISTRERT_ID);
create  index IDX_GR_MEDLEMSKAP_03 on GR_MEDLEMSKAP (OPPGITT_ID);
create  index IDX_GR_MEDLEMSKAP_04 on GR_MEDLEMSKAP (VURDERING_ID);
create  index IDX_GR_MEDLEMSKAP_VILKAR_PER_6 on GR_MEDLEMSKAP_VILKAR_PERIODE (VILKAR_RESULTAT_ID);
create  index IDX_GR_MEDLEMSKAP_VILKAR_PER_7 on GR_MEDLEMSKAP_VILKAR_PERIODE (MEDLEMSKAP_VILKAR_PERIODE_ID);
create  index IDX_GR_PERSONOPPLYSNING_01 on GR_PERSONOPPLYSNING (BEHANDLING_ID);
create  index IDX_GR_PERSONOPPLYSNING_03 on GR_PERSONOPPLYSNING (REGISTRERT_INFORMASJON_ID);
create  index IDX_GR_PERSONOPPLYSNING_04 on GR_PERSONOPPLYSNING (OVERSTYRT_INFORMASJON_ID);
create  index IDX_GR_SOEKNAD_1 on GR_SOEKNAD (BEHANDLING_ID);
create  index IDX_GR_SOEKNAD_2 on GR_SOEKNAD (SOEKNAD_ID);
create  index IDX_HISTINNSLAG_DOK_LINK_01 on HISTORIKKINNSLAG_DOK_LINK (HISTORIKKINNSLAG_ID);
create  index IDX_HISTORIKKINNSLAG_01 on HISTORIKKINNSLAG (BEHANDLING_ID);
create  index IDX_HISTORIKKINNSLAG_02 on HISTORIKKINNSLAG (BRUKER_KJOENN);
create  index IDX_HISTORIKKINNSLAG_03 on HISTORIKKINNSLAG (HISTORIKKINNSLAG_TYPE);
create  index IDX_HISTORIKKINNSLAG_6 on HISTORIKKINNSLAG (FAGSAK_ID);
create  index IDX_HISTORIKKINNSLAG_7 on HISTORIKKINNSLAG (HISTORIKK_AKTOER_ID);
create  index IDX_HISTORIKKINNSLAG_DEL_1 on HISTORIKKINNSLAG_DEL (HISTORIKKINNSLAG_ID);
create  index IDX_HISTORIKKINNSLAG_FELT_1 on HISTORIKKINNSLAG_FELT (HISTORIKKINNSLAG_DEL_ID);
create  index IDX_HISTORIKKINNSLAG_FELT_3 on HISTORIKKINNSLAG_FELT (NAVN, KL_NAVN);
create  index IDX_HISTORIKKINNSLAG_FELT_4 on HISTORIKKINNSLAG_FELT (TIL_VERDI_KODE, KL_TIL_VERDI);
create  index IDX_HISTORIKKINNSLAG_FELT_5 on HISTORIKKINNSLAG_FELT (FRA_VERDI_KODE, KL_FRA_VERDI);
create  index IDX_INNGANGSVILKAR_RES_1 on VILKAR_RESULTAT (VILKAR_RESULTAT);
create  index IDX_INNGANGSVILKAR_RES_2 on VILKAR_RESULTAT (ORIGINAL_BEHANDLING_ID);
create  index IDX_JOURNALPOST_1 on JOURNALPOST (FAGSAK_ID);
create  index IDX_M_V_P_1 on MEDLEMSKAP_VILKAR_PERIODE (OVERSTYRT_UTFALL);
create  index IDX_M_V_P_3 on MEDLEMSKAP_VILKAR_PERIODE (AVSLAGSARSAK);
create  index IDX_MEDLEMSKAP_OPPG_LAND_6 on MEDLEMSKAP_OPPG_LAND (MEDLEMSKAP_OPPG_TILKNYT_ID);
create  index IDX_MEDLEMSKAP_PERIODER_03 on MEDLEMSKAP_PERIODER (MEDLEMSKAP_REGISTRERT_ID);
create  index IDX_MEDLEMSKAP_PERIODER_2 on MEDLEMSKAP_PERIODER (MEDLEMSKAP_TYPE);
create  index IDX_MEDLEMSKAP_PERIODER_3 on MEDLEMSKAP_PERIODER (DEKNING_TYPE);
create  index IDX_MEDLEMSKAP_PERIODER_4 on MEDLEMSKAP_PERIODER (KILDE_TYPE);
create  index IDX_MEDLEMSKAP_PERIODER_6 on MEDLEMSKAP_PERIODER (LOVVALG_LAND);
create  index IDX_MEDLEMSKAP_PERIODER_7 on MEDLEMSKAP_PERIODER (STUDIE_LAND);
create  index IDX_MEDLEMSKAP_V_P_2 on MEDLEMSKAP_VILKAR_PERIODER (VILKAR_UTFALL_MERKNAD);
create  index IDX_MEDLEMSKAP_VILKAR_PERIOD_6 on MEDLEMSKAP_VILKAR_PERIODER (MEDLEMSKAP_VILKAR_PERIODE_ID);
create  index IDX_MEDLEMSKAP_VL_1 on MEDLEMSKAP_VURDERING_LOPENDE (VURDERT_PERIODE_ID);
create  index IDX_MEDLEMSKAP_VL_2 on MEDLEMSKAP_VURDERING_LOPENDE (MANUELL_VURD);
create  index IDX_MEDLEMSKAP_VURDERING_6 on MEDLEMSKAP_VURDERING (MEDLEMSPERIODE_MANUELL_VURD);
create  index IDX_MOTTATT_DOKUMENT_2 on MOTTATT_DOKUMENT (DOKUMENT_KATEGORI);
create  index IDX_MOTTATT_DOKUMENT_6 on MOTTATT_DOKUMENT (BEHANDLING_ID);
create  index IDX_MOTTATT_DOKUMENT_7 on MOTTATT_DOKUMENT (FAGSAK_ID);
create  index IDX_MOTTATT_DOKUMENT_8 on MOTTATT_DOKUMENT (FORSENDELSE_ID);
create  index IDX_MOTTATT_DOKUMENT_9 on MOTTATT_DOKUMENT (JOURNALPOST_ID);
create  index IDX_MOTTATTE_DOKUMENT_1 on MOTTATT_DOKUMENT (TYPE);
create  index IDX_OPPDRAG_KONTROLL_1 on OPPDRAG_KONTROLL (BEHANDLING_ID);
create  index IDX_OPPDRAG_KONTROLL_3 on OPPDRAG_KONTROLL (VENTER_KVITTERING);
create  index IDX_OPPDRAG_KONTROLL_4 on OPPDRAG_KONTROLL (PROSESS_TASK_ID);
create  index IDX_OPPGAVE_BEH_KOB_BEH_ID on OPPGAVE_BEHANDLING_KOBLING (BEHANDLING_ID);
create  index IDX_OPPGAVE_BEHANDLING_KOBLI_6 on OPPGAVE_BEHANDLING_KOBLING (OPPGAVE_AARSAK);
create  index IDX_OPPTJENING_01 on OPPTJENING (VILKAR_RESULTAT_ID);
create  index IDX_OPPTJENING_AKTIVITET_01 on OPPTJENING_AKTIVITET (OPPTJENINGSPERIODE_ID);
create  index IDX_PO_ADRESSE_2 on PO_ADRESSE (PO_INFORMASJON_ID);
create  index IDX_PO_ADRESSE_3 on PO_ADRESSE (AKTOER_ID);
create  index IDX_PO_ADRESSE_5 on PO_ADRESSE (ADRESSE_TYPE);
create  index IDX_PO_PERSONOPPLYSNING_1 on PO_PERSONOPPLYSNING (PO_INFORMASJON_ID);
create  index IDX_PO_PERSONOPPLYSNING_2 on PO_PERSONOPPLYSNING (AKTOER_ID);
create  index IDX_PO_PERSONOPPLYSNING_3 on PO_PERSONOPPLYSNING (REGION);
create  index IDX_PO_PERSONOPPLYSNING_4 on PO_PERSONOPPLYSNING (BRUKER_KJOENN);
create  index IDX_PO_PERSONOPPLYSNING_5 on PO_PERSONOPPLYSNING (SIVILSTAND_TYPE);
create  index IDX_PO_PERSONSTATUS_1 on PO_PERSONSTATUS (PO_INFORMASJON_ID);
create  index IDX_PO_PERSONSTATUS_2 on PO_PERSONSTATUS (AKTOER_ID);
create  index IDX_PO_PERSONSTATUS_4 on PO_PERSONSTATUS (PERSONSTATUS);
create  index IDX_PO_RELASJON_1 on PO_RELASJON (PO_INFORMASJON_ID);
create  index IDX_PO_RELASJON_2 on PO_RELASJON (FRA_AKTOER_ID);
create  index IDX_PO_RELASJON_3 on PO_RELASJON (TIL_AKTOER_ID);
create  index IDX_PO_RELASJON_5 on PO_RELASJON (RELASJONSROLLE);
create  index IDX_PO_STATSBORGERSKAP_1 on PO_STATSBORGERSKAP (PO_INFORMASJON_ID);
create  index IDX_PO_STATSBORGERSKAP_2 on PO_STATSBORGERSKAP (AKTOER_ID);
create  index IDX_PO_STATSBORGERSKAP_4 on PO_STATSBORGERSKAP (STATSBORGERSKAP);
create  index IDX_PROSESS_TASK_1 on PROSESS_TASK (STATUS);
create  index IDX_PROSESS_TASK_2 on PROSESS_TASK (TASK_TYPE);
create  index IDX_PROSESS_TASK_3 on PROSESS_TASK (NESTE_KJOERING_ETTER);
create  index IDX_PROSESS_TASK_5 on PROSESS_TASK (TASK_GRUPPE);
create  index IDX_PROSESS_TASK_6 on PROSESS_TASK (BLOKKERT_AV);
create  index IDX_PROSESS_TASK_TYPE_1 on PROSESS_TASK_TYPE (FEILHANDTERING_ALGORITME);
create  index IDX_RES_BEREGNINGSRESULTAT_F_6 on BR_RESULTAT_BEHANDLING (BEHANDLING_ID);
create  index IDX_RISIKOKLASSIFISERING_1 on RISIKOKLASSIFISERING (BEHANDLING_ID);
create  index IDX_RISIKOKLASSIFISERING_2 on RISIKOKLASSIFISERING (KONTROLL_RESULTAT);
create  index IDX_RISIKOKLASSIFISERING_3 on RISIKOKLASSIFISERING (FARESIGNAL_VURDERING);
create  index IDX_SAMMENLIGNINGSGRUNNLAG_01 on SAMMENLIGNINGSGRUNNLAG (BEREGNINGSGRUNNLAG_ID);
create  index IDX_SAMMENLIGNINGSGRUNNLAG_02 on SAMMENLIGNINGSGRUNNLAG (SAMMENLIGNINGSPERIODE_FOM);
create  index IDX_SAMMENLIGNINGSGRUNNLAG_03 on SAMMENLIGNINGSGRUNNLAG (SAMMENLIGNINGSPERIODE_TOM);
create  index IDX_SAMMENLIGNINGSGRUNNLAG_04 on SAMMENLIGNINGSGRUNNLAG (RAPPORTERT_PR_AAR);
create  index IDX_SATS_1 on BR_SATS (SATS_TYPE);
create  index IDX_SOEKNAD_11 on SO_SOEKNAD (BRUKER_ROLLE);
create  index IDX_SOEKNAD_12 on SO_SOEKNAD (SPRAK_KODE);
create  index IDX_TILBAKEKREVING_INNTREKK_1 on TILBAKEKREVING_INNTREKK (BEHANDLING_ID);
create  index IDX_TILBAKEKREVING_VALG_1 on TILBAKEKREVING_VALG (BEHANDLING_ID);
create  index IDX_TILBAKEKREVING_VALG_2 on TILBAKEKREVING_VALG (VIDERE_BEHANDLING);
create  index IDX_TORINN_RES_GR_01 on TOTRINNRESULTATGRUNNLAG (BEHANDLING_ID);
create  index IDX_TORINN_RES_GR_02 on TOTRINNRESULTATGRUNNLAG (INNTEKT_ARBEID_GRUNNLAG_ID);
create  index IDX_TORINN_RES_GR_03 on TOTRINNRESULTATGRUNNLAG (YTELSES_FORDELING_GRUNNLAG_ID);
create  index IDX_TORINN_RES_GR_04 on TOTRINNRESULTATGRUNNLAG (UTTAK_RESULTAT_ID);
create  index IDX_TORINN_RES_GR_05 on TOTRINNRESULTATGRUNNLAG (BEREGNINGSGRUNNLAG_ID);
create  index IDX_TORINN_RES_GR_06 on TOTRINNRESULTATGRUNNLAG (IAY_GRUNNLAG_UUID);
create  index IDX_TOTRINNSVURDERING on TOTRINNSVURDERING (AKSJONSPUNKT_DEF);
create  index IDX_TOTRINNSVURDERING_2 on TOTRINNSVURDERING (BEHANDLING_ID);
create  index IDX_UTLANDSOPPHOLD_3 on MEDLEMSKAP_OPPG_LAND (LAND);
create  index IDX_UTTAK_RESULTAT_02 on UTTAK_RESULTAT (BEHANDLING_RESULTAT_ID);
create  index IDX_UTTAK_RESULTAT_03 on UTTAK_RESULTAT (OPPRINNELIG_PERIODER_ID);
create  index IDX_UTTAK_RESULTAT_04 on UTTAK_RESULTAT (OVERSTYRT_PERIODER_ID);
create  index IDX_UTTAK_RESULTAT_PERIODE on UTTAK_RESULTAT_PERIODE (UTTAK_RESULTAT_PERIODER_ID);
create  index IDX_UTTAK_RESULTAT_PERIODE_10 on UTTAK_RESULTAT_PERIODE (OPPHOLD_AARSAK);
create  index IDX_UTTAK_RESULTAT_PERIODE_11 on UTTAK_RESULTAT_PERIODE (OVERFOERING_AARSAK);
create  index IDX_UTTAK_RESULTAT_PERIODE_2 on UTTAK_RESULTAT_PERIODE (PERIODE_RESULTAT_AARSAK);
create  index IDX_UTTAK_RESULTAT_PERIODE_6 on UTTAK_RESULTAT_PERIODE (PERIODE_RESULTAT_TYPE);
create  index IDX_VEDLEGG_1 on SOEKNAD_VEDLEGG (INNSENDINGSVALG);
create  index IDX_VEDLEGG_2 on SOEKNAD_VEDLEGG (SOEKNAD_ID);
create  index IDX_VEDTAK_1 on BEHANDLING_VEDTAK (VEDTAK_RESULTAT_TYPE);
create  index IDX_VEDTAK_2 on BEHANDLING_VEDTAK (ANSVARLIG_SAKSBEHANDLER);
create  index IDX_VEDTAK_3 on BEHANDLING_VEDTAK (VEDTAK_DATO);
create  index IDX_VILKAR_1 on VILKAR (VILKAR_UTFALL);
create  index IDX_VILKAR_2 on VILKAR (VILKAR_TYPE);
create  index IDX_VILKAR_3 on VILKAR (VILKAR_RESULTAT_ID);
create  index IDX_VILKAR_6 on VILKAR (AVSLAG_KODE);
create  index IDX_VILKAR_7 on VILKAR (VILKAR_UTFALL_MERKNAD);
create  index IDX_VILKAR_8 on VILKAR (VILKAR_UTFALL_MANUELL);
create  index IDX_VILKAR_9 on VILKAR (VILKAR_UTFALL_OVERSTYRT);
create  index IDX_VIRKSOMHET_1 on VIRKSOMHET (ORGNR);
create  index IDX_VIRKSOMHET_2 on VIRKSOMHET (ORGANISASJONSTYPE);
create  index IDX_VURDER_AARSAK on VURDER_AARSAK_TTVURDERING (TOTRINNSVURDERING_ID);
create  index IDX_VURDER_AARSAK_2 on VURDER_AARSAK_TTVURDERING (AARSAK_TYPE);
create  index UIDX_OPPTJENING_AKTIVITET_04 on OPPTJENING_AKTIVITET (FOM, TOM, AKTIVITET_TYPE, OPPTJENINGSPERIODE_ID);
create UNIQUE index IDX_AKSJONSPUNKT_1 on AKSJONSPUNKT (BEHANDLING_ID, AKSJONSPUNKT_DEF);
create UNIQUE index IDX_ETTERKONTROLL_1 on ETTERKONTROLL (FAGSAK_ID);
create UNIQUE index PK_ABAKUS_INN_LOGG on ABAKUS_INNHENTING_LOGG (ID);alter table ABAKUS_INNHENTING_LOGG add constraint PK_ABAKUS_INNHENTING_LOGG primary key using index PK_ABAKUS_INN_LOGG;

create UNIQUE index PK_AKSJONSPUNKT on AKSJONSPUNKT (ID);alter table AKSJONSPUNKT add constraint PK_AKSJONSPUNKT primary key using index PK_AKSJONSPUNKT;

create UNIQUE index PK_BA_OVERSTYRINGER on BG_AKTIVITET_OVERSTYRING (ID);alter table BG_AKTIVITET_OVERSTYRING add constraint PK_BG_AKTIVITET_OVERSTYRING primary key using index PK_BA_OVERSTYRINGER;

create UNIQUE index PK_BEH_OVERLAPP_INFOTRYGD on BEHANDLING_OVERLAPP_INFOTRYGD (ID);alter table BEHANDLING_OVERLAPP_INFOTRYGD add constraint PK_BEHANDLING_OVERLAPP_INFOTRYGD primary key using index PK_BEH_OVERLAPP_INFOTRYGD;

create UNIQUE index PK_BEHANDLING on BEHANDLING (ID);alter table BEHANDLING add constraint PK_BEHANDLING primary key using index PK_BEHANDLING;

create UNIQUE index PK_BEHANDLING_ARSAK on BEHANDLING_ARSAK (ID);alter table BEHANDLING_ARSAK add constraint PK_BEHANDLING_ARSAK primary key using index PK_BEHANDLING_ARSAK;

create UNIQUE index PK_BEHANDLING_RESULTAT on BEHANDLING_RESULTAT (ID);alter table BEHANDLING_RESULTAT add constraint PK_BEHANDLING_RESULTAT primary key using index PK_BEHANDLING_RESULTAT;

create UNIQUE index PK_BEHANDLING_STEG_TILSTAND on BEHANDLING_STEG_TILSTAND (ID);alter table BEHANDLING_STEG_TILSTAND add constraint PK_BEHANDLING_STEG_TILSTAND primary key using index PK_BEHANDLING_STEG_TILSTAND;

create UNIQUE index PK_BEHANDLING_VEDTAK on BEHANDLING_VEDTAK (ID);alter table BEHANDLING_VEDTAK add constraint PK_BEHANDLING_VEDTAK primary key using index PK_BEHANDLING_VEDTAK;

create UNIQUE index PK_BEREGNINGSGRUNNLAG on BEREGNINGSGRUNNLAG (ID);alter table BEREGNINGSGRUNNLAG add constraint PK_BEREGNINGSGRUNNLAG primary key using index PK_BEREGNINGSGRUNNLAG;

create UNIQUE index PK_BEREGNINGSRESULTAT_ANDEL on BR_ANDEL (ID);alter table BR_ANDEL add constraint PK_BR_ANDEL primary key using index PK_BEREGNINGSRESULTAT_ANDEL;

create UNIQUE index PK_BEREGNINGSRESULTAT_FP on BR_BEREGNINGSRESULTAT (ID);alter table BR_BEREGNINGSRESULTAT add constraint PK_BR_BEREGNINGSRESULTAT primary key using index PK_BEREGNINGSRESULTAT_FP;

create UNIQUE index PK_BG_AKTIVITET on BG_AKTIVITET (ID);alter table BG_AKTIVITET add constraint PK_BG_AKTIVITET primary key using index PK_BG_AKTIVITET;

create UNIQUE index PK_BG_AKTIVITET_OVERSTYRINGER on BG_AKTIVITET_OVERSTYRINGER (ID);alter table BG_AKTIVITET_OVERSTYRINGER add constraint PK_BG_AKTIVITET_OVERSTYRINGER primary key using index PK_BG_AKTIVITET_OVERSTYRINGER;

create UNIQUE index PK_BG_AKTIVITET_STATUS on BG_AKTIVITET_STATUS (ID);alter table BG_AKTIVITET_STATUS add constraint PK_BG_AKTIVITET_STATUS primary key using index PK_BG_AKTIVITET_STATUS;

create UNIQUE index PK_BG_AKTIVITETER on BG_AKTIVITETER (ID);alter table BG_AKTIVITETER add constraint PK_BG_AKTIVITETER primary key using index PK_BG_AKTIVITETER;

create UNIQUE index PK_BG_ANDEL_ARBEIDSFORHOLD on BG_ANDEL_ARBEIDSFORHOLD (ID);alter table BG_ANDEL_ARBEIDSFORHOLD add constraint PK_BG_ANDEL_ARBEIDSFORHOLD primary key using index PK_BG_ANDEL_ARBEIDSFORHOLD;

create UNIQUE index PK_BG_ARBEIDSTAKER_ANDEL on BG_ARBEIDSTAKER_ANDEL (ID);alter table BG_ARBEIDSTAKER_ANDEL add constraint PK_BG_ARBEIDSTAKER_ANDEL primary key using index PK_BG_ARBEIDSTAKER_ANDEL;

create UNIQUE index PK_BG_FAKTA_BER_TILFELLE on BG_FAKTA_BER_TILFELLE (ID);alter table BG_FAKTA_BER_TILFELLE add constraint PK_BG_FAKTA_BER_TILFELLE primary key using index PK_BG_FAKTA_BER_TILFELLE;

create UNIQUE index PK_BG_FRILANS_ANDEL on BG_FRILANS_ANDEL (ID);alter table BG_FRILANS_ANDEL add constraint PK_BG_FRILANS_ANDEL primary key using index PK_BG_FRILANS_ANDEL;

create UNIQUE index PK_BG_PERIODE on BEREGNINGSGRUNNLAG_PERIODE (ID);alter table BEREGNINGSGRUNNLAG_PERIODE add constraint PK_BEREGNINGSGRUNNLAG_PERIODE primary key using index PK_BG_PERIODE;

create UNIQUE index PK_BG_PERIODE_AARSAK on BG_PERIODE_AARSAK (ID);alter table BG_PERIODE_AARSAK add constraint PK_BG_PERIODE_AARSAK primary key using index PK_BG_PERIODE_AARSAK;

create UNIQUE index PK_BG_PERIODE_REGEL_SPORING on BG_PERIODE_REGEL_SPORING (ID);alter table BG_PERIODE_REGEL_SPORING add constraint PK_BG_PERIODE_REGEL_SPORING primary key using index PK_BG_PERIODE_REGEL_SPORING;

create UNIQUE index PK_BG_PR_STATUS_OG_ANDEL on BG_PR_STATUS_OG_ANDEL (ID);alter table BG_PR_STATUS_OG_ANDEL add constraint PK_BG_PR_STATUS_OG_ANDEL primary key using index PK_BG_PR_STATUS_OG_ANDEL;

create UNIQUE index PK_BG_REFUSJON_OVERSTYRINGER on BG_REFUSJON_OVERSTYRINGER (ID);alter table BG_REFUSJON_OVERSTYRINGER add constraint PK_BG_REFUSJON_OVERSTYRINGER primary key using index PK_BG_REFUSJON_OVERSTYRINGER;

create UNIQUE index PK_BG_REGEL_SPORING on BG_REGEL_SPORING (ID);alter table BG_REGEL_SPORING add constraint PK_BG_REGEL_SPORING primary key using index PK_BG_REGEL_SPORING;

create UNIQUE index PK_BG_SG_PR_STATUS on BG_SG_PR_STATUS (ID);alter table BG_SG_PR_STATUS add constraint PK_BG_SG_PR_STATUS primary key using index PK_BG_SG_PR_STATUS;

create UNIQUE index PK_BR_FERIEPENGER on BR_FERIEPENGER (ID);alter table BR_FERIEPENGER add constraint PK_BR_FERIEPENGER primary key using index PK_BR_FERIEPENGER;

create UNIQUE index PK_BR_FERIEPENGER_PR_AAR on BR_FERIEPENGER_PR_AAR (ID);alter table BR_FERIEPENGER_PR_AAR add constraint PK_BR_FERIEPENGER_PR_AAR primary key using index PK_BR_FERIEPENGER_PR_AAR;

create UNIQUE index PK_BR_KONSEKVENS_YTELSE on BEHANDLING_RESULTAT_YT_KONSEK (ID);alter table BEHANDLING_RESULTAT_YT_KONSEK add constraint PK_BEHANDLING_RESULTAT_YT_KONSEK primary key using index PK_BR_KONSEKVENS_YTELSE;

create UNIQUE index PK_BR_OVERSTYRINGER on BG_REFUSJON_OVERSTYRING (ID);alter table BG_REFUSJON_OVERSTYRING add constraint PK_BG_REFUSJON_OVERSTYRING primary key using index PK_BR_OVERSTYRINGER;

create UNIQUE index PK_BR_PERIODE on BR_PERIODE (ID);alter table BR_PERIODE add constraint PK_BR_PERIODE primary key using index PK_BR_PERIODE;

create UNIQUE index PK_BRUKER on BRUKER (ID);alter table BRUKER add constraint PK_BRUKER primary key using index PK_BRUKER;

create UNIQUE index PK_ETTERKONTROLL on ETTERKONTROLL (ID);alter table ETTERKONTROLL add constraint PK_ETTERKONTROLL primary key using index PK_ETTERKONTROLL;

create UNIQUE index PK_FAGSAK on FAGSAK (ID);alter table FAGSAK add constraint PK_FAGSAK primary key using index PK_FAGSAK;

create UNIQUE index PK_FAGSAK_PROSESS_TASK on FAGSAK_PROSESS_TASK (ID);alter table FAGSAK_PROSESS_TASK add constraint PK_FAGSAK_PROSESS_TASK primary key using index PK_FAGSAK_PROSESS_TASK;

create UNIQUE index PK_GR_BEREGNINGSGRUNNLAG on GR_BEREGNINGSGRUNNLAG (ID);alter table GR_BEREGNINGSGRUNNLAG add constraint PK_GR_BEREGNINGSGRUNNLAG primary key using index PK_GR_BEREGNINGSGRUNNLAG;

create UNIQUE index PK_GR_MEDLEMSKAP on GR_MEDLEMSKAP (ID);alter table GR_MEDLEMSKAP add constraint PK_GR_MEDLEMSKAP primary key using index PK_GR_MEDLEMSKAP;

create UNIQUE index PK_GR_MEDLEMSKAP_VILKAR_PER on GR_MEDLEMSKAP_VILKAR_PERIODE (ID);alter table GR_MEDLEMSKAP_VILKAR_PERIODE add constraint PK_GR_MEDLEMSKAP_VILKAR_PERIODE primary key using index PK_GR_MEDLEMSKAP_VILKAR_PER;

create UNIQUE index PK_GR_PERSONOPPLYSNING on GR_PERSONOPPLYSNING (ID);alter table GR_PERSONOPPLYSNING add constraint PK_GR_PERSONOPPLYSNING primary key using index PK_GR_PERSONOPPLYSNING;

create UNIQUE index PK_GR_SOEKNAD on GR_SOEKNAD (ID);alter table GR_SOEKNAD add constraint PK_GR_SOEKNAD primary key using index PK_GR_SOEKNAD;

create UNIQUE index PK_HENDELSE on MOTTATT_HENDELSE (HENDELSE_UID);alter table MOTTATT_HENDELSE add constraint PK_MOTTATT_HENDELSE primary key using index PK_HENDELSE;

create UNIQUE index PK_HISTORIKKINNSLAG on HISTORIKKINNSLAG (ID);alter table HISTORIKKINNSLAG add constraint PK_HISTORIKKINNSLAG primary key using index PK_HISTORIKKINNSLAG;

create UNIQUE index PK_HISTORIKKINNSLAG_DEL on HISTORIKKINNSLAG_DEL (ID);alter table HISTORIKKINNSLAG_DEL add constraint PK_HISTORIKKINNSLAG_DEL primary key using index PK_HISTORIKKINNSLAG_DEL;

create UNIQUE index PK_HISTORIKKINNSLAG_DOK_LINK on HISTORIKKINNSLAG_DOK_LINK (ID);alter table HISTORIKKINNSLAG_DOK_LINK add constraint PK_HISTORIKKINNSLAG_DOK_LINK primary key using index PK_HISTORIKKINNSLAG_DOK_LINK;

create UNIQUE index PK_HISTORIKKINNSLAG_FELT on HISTORIKKINNSLAG_FELT (ID);alter table HISTORIKKINNSLAG_FELT add constraint PK_HISTORIKKINNSLAG_FELT primary key using index PK_HISTORIKKINNSLAG_FELT;

create UNIQUE index PK_INNGANGSVILKAR_RESULTAT on VILKAR_RESULTAT (ID);alter table VILKAR_RESULTAT add constraint PK_VILKAR_RESULTAT primary key using index PK_INNGANGSVILKAR_RESULTAT;

create UNIQUE index PK_JOURNALPOST on JOURNALPOST (ID);alter table JOURNALPOST add constraint PK_JOURNALPOST primary key using index PK_JOURNALPOST;

create UNIQUE index PK_LAGRET_VEDTAK on LAGRET_VEDTAK (ID);alter table LAGRET_VEDTAK add constraint PK_LAGRET_VEDTAK primary key using index PK_LAGRET_VEDTAK;

create UNIQUE index PK_MEDLEMSKAP on MEDLEMSKAP_VURDERING (ID);alter table MEDLEMSKAP_VURDERING add constraint PK_MEDLEMSKAP_VURDERING primary key using index PK_MEDLEMSKAP;

create UNIQUE index PK_MEDLEMSKAP_OPPG_LAND on MEDLEMSKAP_OPPG_LAND (ID);alter table MEDLEMSKAP_OPPG_LAND add constraint PK_MEDLEMSKAP_OPPG_LAND primary key using index PK_MEDLEMSKAP_OPPG_LAND;

create UNIQUE index PK_MEDLEMSKAP_OPPG_TILKNYT on MEDLEMSKAP_OPPG_TILKNYT (ID);alter table MEDLEMSKAP_OPPG_TILKNYT add constraint PK_MEDLEMSKAP_OPPG_TILKNYT primary key using index PK_MEDLEMSKAP_OPPG_TILKNYT;

create UNIQUE index PK_MEDLEMSKAP_PERIODER on MEDLEMSKAP_PERIODER (ID);alter table MEDLEMSKAP_PERIODER add constraint PK_MEDLEMSKAP_PERIODER primary key using index PK_MEDLEMSKAP_PERIODER;

create UNIQUE index PK_MEDLEMSKAP_REGISTRERT on MEDLEMSKAP_REGISTRERT (ID);alter table MEDLEMSKAP_REGISTRERT add constraint PK_MEDLEMSKAP_REGISTRERT primary key using index PK_MEDLEMSKAP_REGISTRERT;

create UNIQUE index PK_MEDLEMSKAP_VILKAR_PERIODE on MEDLEMSKAP_VILKAR_PERIODE (ID);alter table MEDLEMSKAP_VILKAR_PERIODE add constraint PK_MEDLEMSKAP_VILKAR_PERIODE primary key using index PK_MEDLEMSKAP_VILKAR_PERIODE;

create UNIQUE index PK_MEDLEMSKAP_VILKAR_PERIODER on MEDLEMSKAP_VILKAR_PERIODER (ID);alter table MEDLEMSKAP_VILKAR_PERIODER add constraint PK_MEDLEMSKAP_VILKAR_PERIODER primary key using index PK_MEDLEMSKAP_VILKAR_PERIODER;

create UNIQUE index PK_MEDLEMSKAP_VL on MEDLEMSKAP_VURDERING_LOPENDE (ID);alter table MEDLEMSKAP_VURDERING_LOPENDE add constraint PK_MEDLEMSKAP_VURDERING_LOPENDE primary key using index PK_MEDLEMSKAP_VL;

create UNIQUE index PK_MEDLEMSKAP_VP on MEDLEMSKAP_VURDERING_PERIODE (ID);alter table MEDLEMSKAP_VURDERING_PERIODE add constraint PK_MEDLEMSKAP_VURDERING_PERIODE primary key using index PK_MEDLEMSKAP_VP;

create UNIQUE index PK_MOTTATTE_DOKUMENT on MOTTATT_DOKUMENT (ID);alter table MOTTATT_DOKUMENT add constraint PK_MOTTATT_DOKUMENT primary key using index PK_MOTTATTE_DOKUMENT;

create UNIQUE index PK_OPPDRAG_KONTROLL on OPPDRAG_KONTROLL (ID);alter table OPPDRAG_KONTROLL add constraint PK_OPPDRAG_KONTROLL primary key using index PK_OPPDRAG_KONTROLL;

create UNIQUE index PK_OPPGAVE_BEHANDLING_KOBLING on OPPGAVE_BEHANDLING_KOBLING (ID);alter table OPPGAVE_BEHANDLING_KOBLING add constraint PK_OPPGAVE_BEHANDLING_KOBLING primary key using index PK_OPPGAVE_BEHANDLING_KOBLING;

create UNIQUE index PK_OPPTJENING on OPPTJENING (ID);alter table OPPTJENING add constraint PK_OPPTJENING primary key using index PK_OPPTJENING;

create UNIQUE index PK_OPPTJENING_AKTIVITET on OPPTJENING_AKTIVITET (ID);alter table OPPTJENING_AKTIVITET add constraint PK_OPPTJENING_AKTIVITET primary key using index PK_OPPTJENING_AKTIVITET;

create UNIQUE index PK_PO_ADRESSE on PO_ADRESSE (ID);alter table PO_ADRESSE add constraint PK_PO_ADRESSE primary key using index PK_PO_ADRESSE;

create UNIQUE index PK_PO_INFORMASJON on PO_INFORMASJON (ID);alter table PO_INFORMASJON add constraint PK_PO_INFORMASJON primary key using index PK_PO_INFORMASJON;

create UNIQUE index PK_PO_PERSONOPPLYSNING on PO_PERSONOPPLYSNING (ID);alter table PO_PERSONOPPLYSNING add constraint PK_PO_PERSONOPPLYSNING primary key using index PK_PO_PERSONOPPLYSNING;

create UNIQUE index PK_PO_PERSONSTATUS on PO_PERSONSTATUS (ID);alter table PO_PERSONSTATUS add constraint PK_PO_PERSONSTATUS primary key using index PK_PO_PERSONSTATUS;

create UNIQUE index PK_PO_RELASJON on PO_RELASJON (ID);alter table PO_RELASJON add constraint PK_PO_RELASJON primary key using index PK_PO_RELASJON;

create UNIQUE index PK_PO_STATSBORGERSKAP on PO_STATSBORGERSKAP (ID);alter table PO_STATSBORGERSKAP add constraint PK_PO_STATSBORGERSKAP primary key using index PK_PO_STATSBORGERSKAP;

create UNIQUE index PK_PROSESS_TASK_FEILHAND on PROSESS_TASK_FEILHAND (KODE);alter table PROSESS_TASK_FEILHAND add constraint PK_PROSESS_TASK_FEILHAND primary key using index PK_PROSESS_TASK_FEILHAND;

create UNIQUE index PK_PROSESS_TASK_TYPE on PROSESS_TASK_TYPE (KODE);alter table PROSESS_TASK_TYPE add constraint PK_PROSESS_TASK_TYPE primary key using index PK_PROSESS_TASK_TYPE;

create UNIQUE index PK_RES_BEREGNINGSRESULTAT_FP on BR_RESULTAT_BEHANDLING (ID);alter table BR_RESULTAT_BEHANDLING add constraint PK_BR_RESULTAT_BEHANDLING primary key using index PK_RES_BEREGNINGSRESULTAT_FP;

create UNIQUE index PK_RISIKOKLASSIFISERING on RISIKOKLASSIFISERING (ID);alter table RISIKOKLASSIFISERING add constraint PK_RISIKOKLASSIFISERING primary key using index PK_RISIKOKLASSIFISERING;

create UNIQUE index PK_SAMMENLIGNINGSGRUNNLAG on SAMMENLIGNINGSGRUNNLAG (ID);alter table SAMMENLIGNINGSGRUNNLAG add constraint PK_SAMMENLIGNINGSGRUNNLAG primary key using index PK_SAMMENLIGNINGSGRUNNLAG;

create UNIQUE index PK_SATS on BR_SATS (ID);alter table BR_SATS add constraint PK_BR_SATS primary key using index PK_SATS;

create UNIQUE index PK_SOEKNAD on SO_SOEKNAD (ID);alter table SO_SOEKNAD add constraint PK_SO_SOEKNAD primary key using index PK_SOEKNAD;

create UNIQUE index PK_TILBAKEKREVING_INNTREKK on TILBAKEKREVING_INNTREKK (ID);alter table TILBAKEKREVING_INNTREKK add constraint PK_TILBAKEKREVING_INNTREKK primary key using index PK_TILBAKEKREVING_INNTREKK;

create UNIQUE index PK_TILBAKEKREVING_VALG on TILBAKEKREVING_VALG (ID);alter table TILBAKEKREVING_VALG add constraint PK_TILBAKEKREVING_VALG primary key using index PK_TILBAKEKREVING_VALG;

create UNIQUE index PK_TOTRINNRESULTATGRUNNLAG on TOTRINNRESULTATGRUNNLAG (ID);alter table TOTRINNRESULTATGRUNNLAG add constraint PK_TOTRINNRESULTATGRUNNLAG primary key using index PK_TOTRINNRESULTATGRUNNLAG;

create UNIQUE index PK_TOTRINNSVURDERING on TOTRINNSVURDERING (ID);alter table TOTRINNSVURDERING add constraint PK_TOTRINNSVURDERING primary key using index PK_TOTRINNSVURDERING;

create UNIQUE index PK_UTTAK_RESULTAT on UTTAK_RESULTAT (ID);alter table UTTAK_RESULTAT add constraint PK_UTTAK_RESULTAT primary key using index PK_UTTAK_RESULTAT;

create UNIQUE index PK_UTTAK_RESULTAT_PERIODE_1 on UTTAK_RESULTAT_PERIODE (ID);alter table UTTAK_RESULTAT_PERIODE add constraint PK_UTTAK_RESULTAT_PERIODE primary key using index PK_UTTAK_RESULTAT_PERIODE_1;

create UNIQUE index PK_UTTAK_RESULTAT_PERIODER on UTTAK_RESULTAT_PERIODER (ID);alter table UTTAK_RESULTAT_PERIODER add constraint PK_UTTAK_RESULTAT_PERIODER primary key using index PK_UTTAK_RESULTAT_PERIODER;

create UNIQUE index PK_VEDLEGG on SOEKNAD_VEDLEGG (ID);alter table SOEKNAD_VEDLEGG add constraint PK_SOEKNAD_VEDLEGG primary key using index PK_VEDLEGG;

create UNIQUE index PK_VILKAR on VILKAR (ID);alter table VILKAR add constraint PK_VILKAR primary key using index PK_VILKAR;

create UNIQUE index PK_VIRKSOMHET on VIRKSOMHET (ID);alter table VIRKSOMHET add constraint PK_VIRKSOMHET primary key using index PK_VIRKSOMHET;

create UNIQUE index PK_VURDER_AARSAK_TTVURDERING on VURDER_AARSAK_TTVURDERING (ID);alter table VURDER_AARSAK_TTVURDERING add constraint PK_VURDER_AARSAK_TTVURDERING primary key using index PK_VURDER_AARSAK_TTVURDERING;

create UNIQUE index UIDX_ANDELSNR on BG_PR_STATUS_OG_ANDEL (BG_PERIODE_ID, ANDELSNR);
create UNIQUE index UIDX_BEHANDLING_03 on BEHANDLING (UUID);
create UNIQUE index UIDX_BEHANDLING_VEDTAK_1 on BEHANDLING_VEDTAK (BEHANDLING_RESULTAT_ID);
create UNIQUE index UIDX_BRUKER_1 on BRUKER (AKTOER_ID);
create UNIQUE index UIDX_FAGSAK_1 on FAGSAK (SAKSNUMMER);
create UNIQUE index UIDX_FAGSAK_PROSESS_TASK_1 on FAGSAK_PROSESS_TASK (FAGSAK_ID, PROSESS_TASK_ID);
create UNIQUE index UIDX_HISTORIKKINNSLAG_01 on HISTORIKKINNSLAG (UUID);
create UNIQUE index UIDX_MEDLEMSKAP_VL_1 on MEDLEMSKAP_VURDERING_LOPENDE (VURDERINGSDATO, VURDERT_PERIODE_ID);
create UNIQUE index UIDX_OPPTJENING_AKTIVITET_01 on OPPTJENING_AKTIVITET (OPPTJENINGSPERIODE_ID, FOM, AKTIVITET_TYPE, AKTIVITET_REFERANSE, REFERANSE_TYPE);
alter table ABAKUS_INNHENTING_LOGG add constraint FK_ABAKUS_INN_LOGG_01 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table AKSJONSPUNKT add constraint FK_AKSJONSPUNKT_2 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table BEHANDLING add constraint FK_BEHANDLING_1 foreign key (FAGSAK_ID) references FAGSAK(ID);
alter table BEHANDLING_ARSAK add constraint FK_BEHANDLING_ARSAK_1 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table BEHANDLING_ARSAK add constraint FK_BEHANDLING_ARSAK_2 foreign key (ORIGINAL_BEHANDLING_ID) references BEHANDLING(ID);
alter table BEHANDLING_OVERLAPP_INFOTRYGD add constraint FK_BEH_OVERLAPP_INFOTRYGD_1 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table BEHANDLING_RESULTAT add constraint FK_BEHANDLING_RESULTAT_1 foreign key (INNGANGSVILKAR_RESULTAT_ID) references VILKAR_RESULTAT(ID);
alter table BEHANDLING_RESULTAT add constraint FK_BEHANDLING_RESULTAT_3 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table BEHANDLING_RESULTAT_YT_KONSEK add constraint FK_BR_KONSEKVENS_YTELSE_1 foreign key (BEHANDLING_RESULTAT_ID) references BEHANDLING_RESULTAT(ID);
alter table BEHANDLING_STEG_TILSTAND add constraint FK_BEHANDLING_STEG_TILSTAND_1 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table BEHANDLING_VEDTAK add constraint FK_BEHANDLING_VEDTAK_1 foreign key (BEHANDLING_RESULTAT_ID) references BEHANDLING_RESULTAT(ID);
alter table BEREGNINGSGRUNNLAG_PERIODE add constraint FK_BG_PERIODE_1 foreign key (BEREGNINGSGRUNNLAG_ID) references BEREGNINGSGRUNNLAG(ID);
alter table BG_AKTIVITET add constraint FK_BG_AKTIVITET_01 foreign key (BG_AKTIVITETER_ID) references BG_AKTIVITETER(ID);
alter table BG_AKTIVITET_OVERSTYRING add constraint FK_BA_OVERSTYRINGER_01 foreign key (BA_OVERSTYRINGER_ID) references BG_AKTIVITET_OVERSTYRINGER(ID);
alter table BG_AKTIVITET_STATUS add constraint FK_BG_AKTIVITET_STATUS_1 foreign key (BEREGNINGSGRUNNLAG_ID) references BEREGNINGSGRUNNLAG(ID);
alter table BG_ANDEL_ARBEIDSFORHOLD add constraint FK_BG_ANDEL_ARBEIDSFORHOLD_1 foreign key (BG_ANDEL_ID) references BG_PR_STATUS_OG_ANDEL(ID);
alter table BG_ARBEIDSTAKER_ANDEL add constraint FK_BG_ARBEIDSTAKER_ANDEL foreign key (BG_PR_STATUS_ANDEL_ID) references BG_PR_STATUS_OG_ANDEL(ID);
alter table BG_FAKTA_BER_TILFELLE add constraint FK_BG_FAKTA_BER_TILFELLE_1 foreign key (BEREGNINGSGRUNNLAG_ID) references BEREGNINGSGRUNNLAG(ID);
alter table BG_FRILANS_ANDEL add constraint FK_BG_FRILANS_ANDEL foreign key (BG_PR_STATUS_ANDEL_ID) references BG_PR_STATUS_OG_ANDEL(ID);
alter table BG_PERIODE_AARSAK add constraint FK_BG_PERIODE_AARSAK_1 foreign key (BG_PERIODE_ID) references BEREGNINGSGRUNNLAG_PERIODE(ID);
alter table BG_PERIODE_REGEL_SPORING add constraint FK_BG_PERIODE_REGEL_SPORING_01 foreign key (BG_PERIODE_ID) references BEREGNINGSGRUNNLAG_PERIODE(ID);
alter table BG_PR_STATUS_OG_ANDEL add constraint FK_BG_PR_STATUS_OG_ANDEL_1 foreign key (BG_PERIODE_ID) references BEREGNINGSGRUNNLAG_PERIODE(ID);
alter table BG_REFUSJON_OVERSTYRING add constraint FK_BR_OVERSTYRINGER_01 foreign key (BR_OVERSTYRINGER_ID) references BG_REFUSJON_OVERSTYRINGER(ID);
alter table BG_REGEL_SPORING add constraint FK_BG_REGEL_SPORING_01 foreign key (BG_ID) references BEREGNINGSGRUNNLAG(ID);
alter table BG_SG_PR_STATUS add constraint FK_BG_SG_PR_STATUS_01 foreign key (BEREGNINGSGRUNNLAG_ID) references BEREGNINGSGRUNNLAG(ID);
alter table BR_ANDEL add constraint FK_BEREGNINGSRESULTAT_ANDEL_1 foreign key (BR_PERIODE_ID) references BR_PERIODE(ID);
alter table BR_FERIEPENGER add constraint FK_BR_FERIEPENGER_1 foreign key (BEREGNINGSRESULTAT_FP_ID) references BR_BEREGNINGSRESULTAT(ID);
alter table BR_FERIEPENGER_PR_AAR add constraint FK_BR_FERIEPENGER_PR_AAR_1 foreign key (BR_FERIEPENGER_ID) references BR_FERIEPENGER(ID);
alter table BR_FERIEPENGER_PR_AAR add constraint FK_BR_FERIEPENGER_PR_AAR_2 foreign key (BEREGNINGSRESULTAT_ANDEL_ID) references BR_ANDEL(ID);
alter table BR_PERIODE add constraint FK_BR_PERIODE_1 foreign key (BEREGNINGSRESULTAT_FP_ID) references BR_BEREGNINGSRESULTAT(ID);
alter table BR_RESULTAT_BEHANDLING add constraint FK_RES_BEREGNINGSRESULTAT_FP_1 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table ETTERKONTROLL add constraint FK_ETTERKONTROLL_1 foreign key (FAGSAK_ID) references FAGSAK(ID);
alter table FAGSAK add constraint FK_FAGSAK_3 foreign key (BRUKER_ID) references BRUKER(ID);
alter table FAGSAK_PROSESS_TASK add constraint FK_FAGSAK_PROSESS_TASK_1 foreign key (FAGSAK_ID) references FAGSAK(ID);
alter table FAGSAK_PROSESS_TASK add constraint FK_FAGSAK_PROSESS_TASK_3 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table GR_BEREGNINGSGRUNNLAG add constraint FK_GR_BEREGNINGSGRUNNLAG_1 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table GR_BEREGNINGSGRUNNLAG add constraint FK_GR_BEREGNINGSGRUNNLAG_2 foreign key (BEREGNINGSGRUNNLAG_ID) references BEREGNINGSGRUNNLAG(ID);
alter table GR_BEREGNINGSGRUNNLAG add constraint FK_GR_BEREGNINGSGRUNNLAG_3 foreign key (REGISTER_AKTIVITETER_ID) references BG_AKTIVITETER(ID);
alter table GR_BEREGNINGSGRUNNLAG add constraint FK_GR_BEREGNINGSGRUNNLAG_4 foreign key (SAKSBEHANDLET_AKTIVITETER_ID) references BG_AKTIVITETER(ID);
alter table GR_BEREGNINGSGRUNNLAG add constraint FK_GR_BEREGNINGSGRUNNLAG_5 foreign key (BA_OVERSTYRINGER_ID) references BG_AKTIVITET_OVERSTYRINGER(ID);
alter table GR_BEREGNINGSGRUNNLAG add constraint FK_GR_BEREGNINGSGRUNNLAG_6 foreign key (BR_OVERSTYRINGER_ID) references BG_REFUSJON_OVERSTYRINGER(ID);
alter table GR_MEDLEMSKAP add constraint FK_GR_MEDL_BEH foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table GR_MEDLEMSKAP add constraint FK_GR_MEDL_MEDL foreign key (VURDERING_ID) references MEDLEMSKAP_VURDERING(ID);
alter table GR_MEDLEMSKAP add constraint FK_GR_MEDL_REG_MEDL foreign key (REGISTRERT_ID) references MEDLEMSKAP_REGISTRERT(ID);
alter table GR_MEDLEMSKAP add constraint FK_GR_MEDL_TILKN_HJEM foreign key (OPPGITT_ID) references MEDLEMSKAP_OPPG_TILKNYT(ID);
alter table GR_MEDLEMSKAP_VILKAR_PERIODE add constraint FK_GR_MEDLEMSKAP_VILKAR_PER_1 foreign key (VILKAR_RESULTAT_ID) references VILKAR_RESULTAT(ID);
alter table GR_MEDLEMSKAP_VILKAR_PERIODE add constraint FK_GR_MEDLEMSKAP_VILKAR_PER_2 foreign key (MEDLEMSKAP_VILKAR_PERIODE_ID) references MEDLEMSKAP_VILKAR_PERIODE(ID);
alter table GR_PERSONOPPLYSNING add constraint FK_GR_PERSONOPPL_BEH foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table GR_PERSONOPPLYSNING add constraint FK_GR_PERSONOPPLYSNING_03 foreign key (REGISTRERT_INFORMASJON_ID) references PO_INFORMASJON(ID);
alter table GR_PERSONOPPLYSNING add constraint FK_GR_PERSONOPPLYSNING_04 foreign key (OVERSTYRT_INFORMASJON_ID) references PO_INFORMASJON(ID);
alter table GR_SOEKNAD add constraint FK_GR_SOEKNAD_1 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table GR_SOEKNAD add constraint FK_GR_SOEKNAD_2 foreign key (SOEKNAD_ID) references SO_SOEKNAD(ID);
alter table HISTORIKKINNSLAG add constraint FK_BEHANDLING_ID foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table HISTORIKKINNSLAG add constraint FK_HISTORIKKINNSLAG_3 foreign key (FAGSAK_ID) references FAGSAK(ID);
alter table HISTORIKKINNSLAG_DEL add constraint FK_HISTORIKKINNSLAG_DEL_1 foreign key (HISTORIKKINNSLAG_ID) references HISTORIKKINNSLAG(ID);
alter table HISTORIKKINNSLAG_DOK_LINK add constraint FK_HISTORIKKINNSLAG_ID foreign key (HISTORIKKINNSLAG_ID) references HISTORIKKINNSLAG(ID);
alter table HISTORIKKINNSLAG_FELT add constraint FK_HISTORIKKINNSLAG_FELT_1 foreign key (HISTORIKKINNSLAG_DEL_ID) references HISTORIKKINNSLAG_DEL(ID);
alter table JOURNALPOST add constraint FK_JOURNALPOST foreign key (FAGSAK_ID) references FAGSAK(ID);
alter table MEDLEMSKAP_OPPG_LAND add constraint FK_MEDLEMSKAP_OPPG_LAND_1 foreign key (MEDLEMSKAP_OPPG_TILKNYT_ID) references MEDLEMSKAP_OPPG_TILKNYT(ID);
alter table MEDLEMSKAP_PERIODER add constraint FK_MEDLEMSKAP_PERIODER_1 foreign key (MEDLEMSKAP_REGISTRERT_ID) references MEDLEMSKAP_REGISTRERT(ID);
alter table MEDLEMSKAP_VILKAR_PERIODER add constraint FK_MEDLEMSKAP_VILKAR_PERIODE foreign key (MEDLEMSKAP_VILKAR_PERIODE_ID) references MEDLEMSKAP_VILKAR_PERIODE(ID);
alter table MEDLEMSKAP_VURDERING_LOPENDE add constraint FK_VURDERT_MEDLEMSKAP_P_1 foreign key (VURDERT_PERIODE_ID) references MEDLEMSKAP_VURDERING_PERIODE(ID);
alter table MOTTATT_DOKUMENT add constraint FK_MOTTATT_DOKUMENT_02 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table MOTTATT_DOKUMENT add constraint FK_MOTTATT_DOKUMENT_04 foreign key (FAGSAK_ID) references FAGSAK(ID);
alter table OPPGAVE_BEHANDLING_KOBLING add constraint FK_OPPGAVE_BEH_KOBLING_2 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table OPPTJENING add constraint FK_OPPTJENING_1 foreign key (VILKAR_RESULTAT_ID) references VILKAR_RESULTAT(ID);
alter table OPPTJENING_AKTIVITET add constraint FK_OPPTJENING_AKTIVITET foreign key (OPPTJENINGSPERIODE_ID) references OPPTJENING(ID);
alter table PO_ADRESSE add constraint FK_PO_ADRESSE_2 foreign key (PO_INFORMASJON_ID) references PO_INFORMASJON(ID);
alter table PO_PERSONOPPLYSNING add constraint FK_PO_PERSONOPPLYSNING_2 foreign key (PO_INFORMASJON_ID) references PO_INFORMASJON(ID);
alter table PO_PERSONSTATUS add constraint FK_PO_PERSONSTATUS_2 foreign key (PO_INFORMASJON_ID) references PO_INFORMASJON(ID);
alter table PO_RELASJON add constraint FK_PO_RELASJON_2 foreign key (PO_INFORMASJON_ID) references PO_INFORMASJON(ID);
alter table PO_STATSBORGERSKAP add constraint FK_PO_STATSBORGERSKAP_2 foreign key (PO_INFORMASJON_ID) references PO_INFORMASJON(ID);
alter table PROSESS_TASK add constraint FK_PROSESS_TASK_1 foreign key (TASK_TYPE) references PROSESS_TASK_TYPE(KODE);
alter table PROSESS_TASK_TYPE add constraint FK_PROSESS_TASK_TYPE_1 foreign key (FEILHANDTERING_ALGORITME) references PROSESS_TASK_FEILHAND(KODE);
alter table RISIKOKLASSIFISERING add constraint FK_RISIKOKLASSIFISERING_1 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table SAMMENLIGNINGSGRUNNLAG add constraint FK_SAMMENLIGNINGSGRUNNLAG_1 foreign key (BEREGNINGSGRUNNLAG_ID) references BEREGNINGSGRUNNLAG(ID);
alter table SOEKNAD_VEDLEGG add constraint FK_VEDLEGG_2 foreign key (SOEKNAD_ID) references SO_SOEKNAD(ID);
alter table TILBAKEKREVING_INNTREKK add constraint FK_TILBAKEKREVING_INNTREKK_1 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table TILBAKEKREVING_VALG add constraint FK_TILBAKEKREVING_VALG_1 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table TOTRINNRESULTATGRUNNLAG add constraint FK_TOTRINNRESULTATGRUNNLAG_1 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table TOTRINNRESULTATGRUNNLAG add constraint FK_TOTRINNRESULTATGRUNNLAG_4 foreign key (UTTAK_RESULTAT_ID) references UTTAK_RESULTAT(ID);
alter table TOTRINNRESULTATGRUNNLAG add constraint FK_TOTRINNRESULTATGRUNNLAG_5 foreign key (BEREGNINGSGRUNNLAG_ID) references BEREGNINGSGRUNNLAG(ID);
alter table TOTRINNSVURDERING add constraint FK_TOTRINNSVURDERING_2 foreign key (BEHANDLING_ID) references BEHANDLING(ID);
alter table UTTAK_RESULTAT add constraint FK_UTTAK_RESULTAT_1 foreign key (BEHANDLING_RESULTAT_ID) references BEHANDLING_RESULTAT(ID);
alter table UTTAK_RESULTAT add constraint FK_UTTAK_RESULTAT_2 foreign key (OPPRINNELIG_PERIODER_ID) references UTTAK_RESULTAT_PERIODER(ID);
alter table UTTAK_RESULTAT add constraint FK_UTTAK_RESULTAT_3 foreign key (OVERSTYRT_PERIODER_ID) references UTTAK_RESULTAT_PERIODER(ID);
alter table UTTAK_RESULTAT_PERIODE add constraint FK_UTTAK_RESULTAT_PERIODE_01 foreign key (UTTAK_RESULTAT_PERIODER_ID) references UTTAK_RESULTAT_PERIODER(ID);
alter table VILKAR add constraint FK_VILKAR_3 foreign key (VILKAR_RESULTAT_ID) references VILKAR_RESULTAT(ID);
alter table VILKAR_RESULTAT add constraint FK_INNGANGSVILKAR_RESULTAT_2 foreign key (ORIGINAL_BEHANDLING_ID) references BEHANDLING(ID);
alter table VURDER_AARSAK_TTVURDERING add constraint FK_VURDER_AARSAK_TTVURDERING_1 foreign key (TOTRINNSVURDERING_ID) references TOTRINNSVURDERING(ID);
comment on table VURDER_AARSAK_TTVURDERING is 'Årsaken til at aksjonspunkt må vurderes på nytt';
comment on table VIRKSOMHET is 'Virksomhet fra enhetsregisteret';
comment on table VILKAR_RESULTAT is 'En samling av inngangsvilkår resultat.';
comment on table VILKAR is 'Vilkår som inneholder utfallet for en gitt vilkårstype.';
comment on table UTTAK_RESULTAT_PERIODER is 'Brukes for å samle rader fra UTTAK_RESULTAT_PERIODE som hører sammen';
comment on table UTTAK_RESULTAT_PERIODE is 'Uttakresultatperiode';
comment on table UTTAK_RESULTAT is 'Peker på UTTAK_RESULTAT_PERIODER for å angi hvilke perioder som er aktive';
comment on table TOTRINNSVURDERING is 'Statisk read only totrinnsvurdering som brukes til å vise vurderinger til aksjonspunkter uavhengig av status';
comment on table TOTRINNRESULTATGRUNNLAG is 'Tabell som held grunnlagsId for data vist i panelet fra beslutter.';
comment on table TILBAKEKREVING_VALG is 'Lagre valg av tilbakekreving';
comment on table TILBAKEKREVING_INNTREKK is 'Inneholder informasjon om inntrekk skal skrus av ved iverksettelse mot økonomi';
comment on table SOEKNAD_VEDLEGG is 'Vedlegg til søknad, eks: terminbekreftelse';
comment on table SO_SOEKNAD is 'Søknad om foreldrepenger';
comment on table SAMMENLIGNINGSGRUNNLAG is 'Sammenligningsgrunnlag';
comment on table RISIKOKLASSIFISERING is 'Risikoklassifisering knyttet til behandlingen. Hentes fra FPRISK';
comment on table PROSESS_TASK_TYPE is 'Kodetabell for typer prosesser med beskrivelse og informasjon om hvilken feilhåndteringen som skal benyttes';
comment on table PROSESS_TASK_FEILHAND is 'Kodetabell for feilhåndterings-metoder. For eksempel antall ganger å prøve på nytt og til hvilke tidspunkt';
comment on table PROSESS_TASK is 'Inneholder tasks som skal kjøres i bakgrunnen';
comment on table PO_STATSBORGERSKAP is 'Personopplysning - statsborgerskap';
comment on table PO_RELASJON is 'Angir relasjon mellom to personer (som må ligge i PO_PERSONOPPLYSNING, selv om dette er ingen db-constraint)';
comment on table PO_PERSONSTATUS is 'Personopplysning - personstatus';
comment on table PO_PERSONOPPLYSNING is 'Personopplysning - personopplysning';
comment on table PO_INFORMASJON is 'Aggregering av informasjon om personopplysning';
comment on table PO_ADRESSE is 'Personopplysning - adresse';
comment on table OPPTJENING_AKTIVITET is 'Opptjening aktiviteter som er vurdert innenfor angitt opptjeningperiode og klassifisert ifht. anvendelse';
comment on table OPPTJENING is 'Opptjeningsperiode som fastsatt gjennom Inngangsvilkåret';
comment on table OPPGAVE_BEHANDLING_KOBLING is 'Kobling mellom opprettede oppgaver i GSAK og behandlinger.';
comment on table OPPDRAG_KONTROLL is 'Inneholder kvittering/svar melding fra Økonomi';
comment on table MOTTATT_HENDELSE is 'Holder unik identifikator for alle mottatte hendelser. Brukes for å unngå at en hendelse medfører flere revurderinger';
comment on table MOTTATT_DOKUMENT is 'Mottatt dokument som er lagret i Joark';
comment on table MEDLEMSKAP_VURDERING_PERIODE is 'En koblingstabell som holder vurderte periode for løpende medlemskap';
comment on table MEDLEMSKAP_VURDERING_LOPENDE is 'En koblingstabell som holder vurderte periode for løpende medlemskap';
comment on table MEDLEMSKAP_VURDERING is 'Medlemskap slik det er vurdert av systemet eller saksbehandler';
comment on table MEDLEMSKAP_VILKAR_PERIODER is 'Periodisering av vilkårsvurderingen for medlemskap';
comment on table MEDLEMSKAP_VILKAR_PERIODE is 'Aggregat for periodisering av vilkårsvurderingen for medlemskap';
comment on table MEDLEMSKAP_REGISTRERT is 'Aggregat for medlemskap opplysninger fra register (MEDL)';
comment on table MEDLEMSKAP_PERIODER is 'Perioder med medlemsskap i folketrygden';
comment on table MEDLEMSKAP_OPPG_TILKNYT is 'Oppgitt tilknytning til hjemland fra Søker';
comment on table MEDLEMSKAP_OPPG_LAND is 'Informasjon om utenlandsopphold';
comment on table LAGRET_VEDTAK is 'Vedtak som er lagret på xml-form i vedtakslageret';
comment on table JOURNALPOST is 'Journalposter som er blitt knyttet til saken';
comment on table HISTORIKKINNSLAG_FELT is 'En historikkinnslagdel har typisk mange felt';
comment on table HISTORIKKINNSLAG_DOK_LINK is 'Kobling fra historikkinnslag til aktuell dokumentasjon';
comment on table HISTORIKKINNSLAG_DEL is 'Et historikkinnslag kan ha en eller flere deler';
comment on table HISTORIKKINNSLAG is 'Historikk over hendelser i saken';
comment on table GR_SOEKNAD is 'Grunnlag for søknaden';
comment on table GR_PERSONOPPLYSNING is 'Behandlingsgrunnlag for Personopplysning (aggregat) for søker med familie';
comment on table GR_MEDLEMSKAP_VILKAR_PERIODE is 'Grunnlag for periodisering av vilkårsvurderingen for medlemskap';
comment on table GR_MEDLEMSKAP is 'Behandlingsgrunnlag for MEDLEMSKAP (aggregat) for søker med familie';
comment on table GR_BEREGNINGSGRUNNLAG is 'Tabell som kobler et beregningsgrunnlag til behandling';
comment on table FAGSAK_PROSESS_TASK is '1-M relasjonstabell for � mappe fagsak til prosess_tasks (som ikke er FERDIG)';
comment on table FAGSAK is 'Fagsak for engangsstønad og foreldrepenger. Alle behandling er koblet mot en fagsak.';
comment on table ETTERKONTROLL is 'Tabell for å holde track på behandlinger som trenger etterkontroll';
comment on table BRUKER is 'Bruker som saken gjelder.';
comment on table BR_SATS is 'Satser brukt ifm beregning av ytelser';
comment on table BR_RESULTAT_BEHANDLING is 'Tabell som kobler et beregningsresultat_fp til behandling';
comment on table BR_PERIODE is 'Periode i tilkjent ytelse';
comment on table BR_FERIEPENGER_PR_AAR is 'Årsverdier av feriepenger knyttet til andel';
comment on table BR_FERIEPENGER is 'Oversikt over ev feriepenger';
comment on table BR_BEREGNINGSRESULTAT is 'Aggregat for tilkjent ytelse';
comment on table BR_ANDEL is 'Andel i tilkjent ytelse';
comment on table BG_SG_PR_STATUS is 'Sammenligningsgrunnlag pr status';
comment on table BG_REGEL_SPORING is 'Tabell som lagrer regelsporinger for beregningsgrunnlag';
comment on table BG_REFUSJON_OVERSTYRINGER is 'Tabell som knytter BG_REFUSJON_OVERSTYRING til GR_BEREGNINGSGRUNNLAG';
comment on table BG_REFUSJON_OVERSTYRING is 'Overstyringer av aktiviteter som er relevant for beregning';
comment on table BG_PR_STATUS_OG_ANDEL is 'Beregningsgrunnlag pr status og andel';
comment on table BG_PERIODE_REGEL_SPORING is 'Tabell som lagrer regelsporinger for beregningsgrunnlagperioder';
comment on table BG_PERIODE_AARSAK is 'Periodeårsaker for splitting av perioder i beregningsgrunnlag';
comment on table BG_FRILANS_ANDEL is 'Tabell for felter på andel spesifikt for frilans';
comment on table BG_FAKTA_BER_TILFELLE is 'Eit fakta om beregning tilfelle for eit beregningsgrunnlag';
comment on table BG_ARBEIDSTAKER_ANDEL is 'Tabell for felter på andel spesifikt for arbeidstaker';
comment on table BG_ANDEL_ARBEIDSFORHOLD is 'Informasjon om arbeidsforholdet knyttet til beregningsgrunnlagandelen';
comment on table BG_AKTIVITETER is 'Tabell som knytter BG_AKTIVITET til GR_BEREGNINGSGRUNNLAG';
comment on table BG_AKTIVITET_STATUS is 'Aktivitetsstatus i beregningsgrunnlag';
comment on table BG_AKTIVITET_OVERSTYRINGER is 'Tabell som knytter BG_AKTIVITET_OVERSTYRING til GR_BEREGNINGSGRUNNLAG';
comment on table BG_AKTIVITET_OVERSTYRING is 'Overstyringer av aktiviteter som er relevant for beregning';
comment on table BG_AKTIVITET is 'Aktivitet som er relevant for beregning';
comment on table BEREGNINGSGRUNNLAG_PERIODE is 'Beregningsgrunnlagsperiode';
comment on table BEREGNINGSGRUNNLAG is 'Aggregat for beregningsgrunnlag';
comment on table BEHANDLING_VEDTAK is 'Vedtak koblet til en behandling via et behandlingsresultat.';
comment on table BEHANDLING_STEG_TILSTAND is 'Angir tilstand for behandlingsteg som kjøres';
comment on table BEHANDLING_RESULTAT_YT_KONSEK is 'En revurderings konsekvenser for ytelsen';
comment on table BEHANDLING_RESULTAT is 'Beregningsresultat. Knytter sammen beregning og behandling.';
comment on table BEHANDLING_OVERLAPP_INFOTRYGD is 'Behandlinger identifisert med overlappende ytelse i Infotrygd under iverksetting';
comment on table BEHANDLING_ARSAK is 'Årsak for rebehandling';
comment on table BEHANDLING is 'Behandling av fagsak';
comment on table AKSJONSPUNKT is 'Aksjoner som en saksbehandler må utføre manuelt.';
comment on table ABAKUS_INNHENTING_LOGG is 'Logger hvilket aktivt nytt grunnlag som innhenting trigget i abakus';
comment on column VURDER_AARSAK_TTVURDERING.AARSAK_TYPE is 'Type årsak til totrinnsvurdering (eks. FEIL_LOV, FEIL_FAKTA, etc.)';
comment on column VIRKSOMHET.REGISTRERT is 'Når virksomheten ble registrert i enhetsregisteret';
comment on column VIRKSOMHET.ORGNR is 'Bedriftens unike identifikator i enhetsregisteret';
comment on column VIRKSOMHET.ORGANISASJONSTYPE is 'Organisasjonstype';
comment on column VIRKSOMHET.OPPSTART is 'Når næringen startet opp';
comment on column VIRKSOMHET.OPPLYSNINGER_OPPDATERT_TID is 'Siste tidspunkt for forespørsel til enhetsregisteret';
comment on column VIRKSOMHET.NAVN is 'Bedriftens navn i enhetsregisteret';
comment on column VIRKSOMHET.ID is 'Primærnøkkel';
comment on column VIRKSOMHET.AVSLUTTET is 'Når næringen opphørte';
comment on column VILKAR_RESULTAT.VILKAR_RESULTAT is 'FK: VILKAR_RESULTAT_TYPE Fremmednøkkeltil kodeverk for vilkårsresultattype';
comment on column VILKAR_RESULTAT.OVERSTYRT is 'Om vilkårsresultatet er overstyrt';
comment on column VILKAR_RESULTAT.ORIGINAL_BEHANDLING_ID is 'FK:BEHANDLING FK: BEHANDLING Fremmednøkkel for kobling til behandlingen denne raden i tabellen hører til';
comment on column VILKAR_RESULTAT.ID is 'Primary Key';
comment on column VILKAR.VILKAR_UTFALL_OVERSTYRT is 'Vilkår utfall overstyrt (eks. Oppfylt)';
comment on column VILKAR.VILKAR_UTFALL_MERKNAD is 'FK:VILKAR_UTFALL_MERKNAD Fremmednøkkel til kodeverkstabell over merknader sm kan velges i saammenheng med vilkårsvurderingen';
comment on column VILKAR.VILKAR_UTFALL_MANUELL is 'Vilkår utfall satt manuelt (eks. Ikke oppfylt)';
comment on column VILKAR.VILKAR_UTFALL is 'FK:VILKAR_UTFALL_TYPE Fremmednøkkel til kodeverkstabell over mulige utfall av vilkårsvurderingen';
comment on column VILKAR.VILKAR_TYPE is 'Vilkår type kodeverk';
comment on column VILKAR.VILKAR_RESULTAT_ID is 'FK:INNGANGSVILKAR_RESULTAT Fremmednøkkel til tabellen som viser de avklarte inngangsvilkårene som er grunnlaget for behandlingsresultatet';
comment on column VILKAR.REGEL_INPUT is 'Input til regel for vurdering av vilkåret';
comment on column VILKAR.REGEL_EVALUERING is 'JSON struktur som beskriver regel-evalueringen.';
comment on column VILKAR.MERKNAD_PARAMETERE is 'Parametere til merknader';
comment on column VILKAR.ID is 'Primary Key';
comment on column VILKAR.AVSLAG_KODE is 'Avslag årsak for vilkår (eks. 1001 - Søkt for tidlig, etc)';
comment on column UTTAK_RESULTAT_PERIODER.ID is 'Primærnøkkel';
comment on column UTTAK_RESULTAT_PERIODE.UTTAK_RESULTAT_PERIODER_ID is 'FK:UTTAK_RESULTAT_PERIODER Refererer til hvilken uttaksperioder perioden ligger i';
comment on column UTTAK_RESULTAT_PERIODE.SAMTIDIG_UTTAKSPROSENT is 'Samtidig uttaksprosent fra perioden';
comment on column UTTAK_RESULTAT_PERIODE.SAMTIDIG_UTTAK is 'Uttaksperiode har samtidig uttak';
comment on column UTTAK_RESULTAT_PERIODE.PERIODE_RESULTAT_TYPE is 'Hvilket resultat uttaksperioden har fått';
comment on column UTTAK_RESULTAT_PERIODE.PERIODE_RESULTAT_AARSAK is 'Årsak til resultat uttaksperioden har fått';
comment on column UTTAK_RESULTAT_PERIODE.OVERFOERING_AARSAK is 'Årsak til overføring';
comment on column UTTAK_RESULTAT_PERIODE.OPPHOLD_AARSAK is 'Årsak til opphold';
comment on column UTTAK_RESULTAT_PERIODE.MANUELT_BEHANDLET is 'Om perioden har blitt manuelt behandlet eller ikke';
comment on column UTTAK_RESULTAT_PERIODE.KL_PERIODE_RESULTAT_AARSAK is 'Periode resultat årsak kodeverk';
comment on column UTTAK_RESULTAT_PERIODE.ID is 'Primærnøkkel';
comment on column UTTAK_RESULTAT_PERIODE.GRADERING_INNVILGET is 'Om gradering ble innvilget';
comment on column UTTAK_RESULTAT_PERIODE.FLERBARNSDAGER is 'Angir om flerbarnsdager skal benyttes i perioden';
comment on column UTTAK_RESULTAT_PERIODE.BEGRUNNELSE is 'Saksbehandlers begrunnelse (brukes ved manuell fastsetting og overstyring)';
comment on column UTTAK_RESULTAT.OVERSTYRT_PERIODER_ID is 'FK:UTTAK_RESULTAT_PERIODER Overstyrte periodene til uttaksresultatet. Settes når saksbehandler overstyrer de opprinnelige periodene';
comment on column UTTAK_RESULTAT.OPPRINNELIG_PERIODER_ID is 'FK:UTTAK_RESULTAT_PERIODER Opprinnelige periodene til uttaksresultatet';
comment on column UTTAK_RESULTAT.ID is 'Primærnøkkel';
comment on column UTTAK_RESULTAT.BEHANDLING_RESULTAT_ID is 'FK:BEHANDLING_RESULTAT Behandlingsresultatet til uttaksresultatet';
comment on column TOTRINNSVURDERING.GODKJENT is 'Beslutters godkjenning';
comment on column TOTRINNSVURDERING.BEGRUNNELSE is 'Beslutters begrunnelse';
comment on column TOTRINNSVURDERING.AKSJONSPUNKT_DEF is 'Aksjonspunkt som vurderes';
comment on column TOTRINNRESULTATGRUNNLAG.YTELSES_FORDELING_GRUNNLAG_ID is 'FK til aktivt YtelsesFordelingGrunnlag ved totrinnsbehanddlingen';
comment on column TOTRINNRESULTATGRUNNLAG.UTTAK_RESULTAT_ID is 'FK til aktivt UttakResultat ved totrinnsbehandlingen';
comment on column TOTRINNRESULTATGRUNNLAG.INNTEKT_ARBEID_GRUNNLAG_ID is 'FK til aktivt InntektArbeidGrunnlag ved totrinnsbehandlingen';
comment on column TOTRINNRESULTATGRUNNLAG.ID is 'PK';
comment on column TOTRINNRESULTATGRUNNLAG.IAY_GRUNNLAG_UUID is 'Unik UUID for IAY grunnlag til utvortes bruk. Representerer en immutable og unikt identifiserbar instans av dette aggregatet';
comment on column TOTRINNRESULTATGRUNNLAG.BEREGNINGSGRUNNLAG_ID is 'FK til aktivt Beregningsgrunnlag ved totrinnsbehandlingen';
comment on column TOTRINNRESULTATGRUNNLAG.BEHANDLING_ID is 'FK til behandling som hører til totrinn resultatet';
comment on column TILBAKEKREVING_VALG.VIDERE_BEHANDLING is 'Angir hvordan saken behandles videre';
comment on column TILBAKEKREVING_VALG.VERSJON is 'Versjon av tilbakekreving valg';
comment on column TILBAKEKREVING_VALG.VARSELTEKST is 'Tilleggsinformasjon for varsel til bruker om tilbakekreving';
comment on column TILBAKEKREVING_VALG.TBK_VILKAAR_OPPFYLT is 'Angir om tilbakekrevingsvilkår oppfylt (J/N/null)';
comment on column TILBAKEKREVING_VALG.ID is 'Primary Key';
comment on column TILBAKEKREVING_VALG.GRUNN_TIL_REDUKSJON is 'Angir om grunner til særlige grunner til reduksjon er tilstede (J/N/null)';
comment on column TILBAKEKREVING_VALG.AKTIV is 'Angir status av tilbakekreving valg (J/N)';
comment on column TILBAKEKREVING_INNTREKK.ID is 'Primærnøkkel';
comment on column TILBAKEKREVING_INNTREKK.AVSLAATT_INNTREKK is 'Angir om inntrekk skal skrus av ved iverksettelse (J/N)';
comment on column TILBAKEKREVING_INNTREKK.AKTIV is 'Angir om raden er aktiv (J/N)';
comment on column SOEKNAD_VEDLEGG.VEDLEGG_PAKREVD is 'Om vedlegget er påkrevd';
comment on column SOEKNAD_VEDLEGG.TILLEGGSINFO is 'Fritekst relatert til vedlegg';
comment on column SOEKNAD_VEDLEGG.SOEKNAD_ID is 'FK:SOEKNAD Fremmednøkkel som viser til søknaden';
comment on column SOEKNAD_VEDLEGG.SKJEMANUMMER is 'Skjemanummer på vedlegget';
comment on column SOEKNAD_VEDLEGG.INNSENDINGSVALG is 'FK:INNSENDINGSVALG Fremmednøkkel til tabell over mulige innsendingsvalg';
comment on column SOEKNAD_VEDLEGG.ID is 'Primary Key';
comment on column SO_SOEKNAD.TILLEGGSOPPLYSNINGER is 'Tilleggsopplysninger';
comment on column SO_SOEKNAD.SPRAK_KODE is 'Kode for hvilket språk søker sender søknad på';
comment on column SO_SOEKNAD.SOEKNADSDATO is 'Søknadsdato';
comment on column SO_SOEKNAD.MOTTATT_DATO is 'Mottatt dato';
comment on column SO_SOEKNAD.ID is 'Primary Key';
comment on column SO_SOEKNAD.ER_ENDRINGSSOEKNAD is 'Er endringssøknad';
comment on column SO_SOEKNAD.ELEKTRONISK_REGISTRERT is 'Elektronisk registrert søknad';
comment on column SO_SOEKNAD.BRUKER_ROLLE is 'FK:RELASJONSROLLE_TYPE';
comment on column SO_SOEKNAD.BEGRUNNELSE_FOR_SEN_INNSENDING is 'Begrunnelse for sen innsending';
comment on column SAMMENLIGNINGSGRUNNLAG.SAMMENLIGNINGSPERIODE_TOM is 'Siste dag i sammenligningsperiode';
comment on column SAMMENLIGNINGSGRUNNLAG.SAMMENLIGNINGSPERIODE_FOM is 'Første dag i sammenligningsperiode';
comment on column SAMMENLIGNINGSGRUNNLAG.RAPPORTERT_PR_AAR is 'Rapportert inntekt per år';
comment on column SAMMENLIGNINGSGRUNNLAG.ID is 'Primærnøkkel';
comment on column SAMMENLIGNINGSGRUNNLAG.BEREGNINGSGRUNNLAG_ID is 'FK:';
comment on column SAMMENLIGNINGSGRUNNLAG.AVVIK_PROMILLE is 'Avvik, promille';
comment on column RISIKOKLASSIFISERING.KONTROLL_RESULTAT is 'Kodeverk: KONTROLLRESULTAT';
comment on column RISIKOKLASSIFISERING.FARESIGNAL_VURDERING is 'Behandlingens vurdering av faresignaler';
comment on column RISIKOKLASSIFISERING.ERAKTIV is 'Definerer om dette er den gjeldende risikoklassifiseringen for behandlingen';
comment on column RISIKOKLASSIFISERING.BEHANDLING_ID is 'Behandlingen risikoklassifiseringen gjelder for.';
comment on column PROSESS_TASK_TYPE.NAVN is 'Lesbart navn på prosesstasktype';
comment on column PROSESS_TASK_TYPE.KODE is 'Kodeverk Primary Key';
comment on column PROSESS_TASK_TYPE.FEILHANDTERING_ALGORITME is 'FK:PROSESS_TASK_FEILHAND Fremmednøkkel til tabell som viser detaljer om hvordan en feilsituasjon skal håndteres';
comment on column PROSESS_TASK_TYPE.FEIL_SEK_MELLOM_FORSOEK is 'Ventetid i sekunder mellom hvert forsøk på rekjøring om noe har gått galt';
comment on column PROSESS_TASK_TYPE.FEIL_MAKS_FORSOEK is 'Maksimalt anntall forsøk på rekjøring om noe går galt';
comment on column PROSESS_TASK_TYPE.CRON_EXPRESSION is 'Cron-expression for når oppgaven skal kjøres på nytt';
comment on column PROSESS_TASK_TYPE.BESKRIVELSE is 'Utdypende beskrivelse av koden';
comment on column PROSESS_TASK_FEILHAND.NAVN is 'Lesbart navn på type feilhåndtering brukt i prosesstask';
comment on column PROSESS_TASK_FEILHAND.KODE is 'Kodeverk Primary Key';
comment on column PROSESS_TASK_FEILHAND.INPUT_VARIABEL2 is 'Variabel 2: Dynamisk konfigurasjon for en feilhåndteringsstrategi.  Verdi og betydning er bestemt av feilhåndteringsalgoritmen';
comment on column PROSESS_TASK_FEILHAND.INPUT_VARIABEL1 is 'Variabel 1: Dynamisk konfigurasjon for en feilhåndteringsstrategi.  Verdi og betydning er bestemt av feilhåndteringsalgoritmen';
comment on column PROSESS_TASK_FEILHAND.BESKRIVELSE is 'Utdypende beskrivelse av koden';
comment on column PROSESS_TASK.VERSJON is 'angir versjon for optimistisk låsing';
comment on column PROSESS_TASK.TASK_TYPE is 'navn på task. Brukes til å matche riktig implementasjon';
comment on column PROSESS_TASK.TASK_SEKVENS is 'angir rekkefølge på task innenfor en gruppe ';
comment on column PROSESS_TASK.TASK_PAYLOAD is 'inputdata for en task';
comment on column PROSESS_TASK.TASK_PARAMETERE is 'parametere angitt for en task';
comment on column PROSESS_TASK.TASK_GRUPPE is 'angir en unik id som grupperer flere ';
comment on column PROSESS_TASK.STATUS is 'status på task: KLAR, NYTT_FORSOEK, FEILET, VENTER_SVAR, FERDIG';
comment on column PROSESS_TASK.SISTE_KJOERING_TS is 'siste gang tasken ble forsøkt kjørt (før kjøring)';
comment on column PROSESS_TASK.SISTE_KJOERING_SLUTT_TS is 'tidsstempel siste gang tasken ble kjørt (etter kjøring)';
comment on column PROSESS_TASK.SISTE_KJOERING_SERVER is 'navn på node som sist kjørte en task (server@pid)';
comment on column PROSESS_TASK.SISTE_KJOERING_PLUKK_TS is 'siste gang tasken ble forsøkt plukket (fra db til in-memory, før kjøring)';
comment on column PROSESS_TASK.SISTE_KJOERING_FEIL_TEKST is 'siste feil tasken fikk';
comment on column PROSESS_TASK.SISTE_KJOERING_FEIL_KODE is 'siste feilkode tasken fikk';
comment on column PROSESS_TASK.PRIORITET is 'prioritet på task.  Høyere tall har høyere prioritet';
comment on column PROSESS_TASK.NESTE_KJOERING_ETTER is 'tasken skal ikke kjøeres før tidspunkt er passert';
comment on column PROSESS_TASK.ID is 'Primary Key';
comment on column PROSESS_TASK.FEILEDE_FORSOEK is 'antall feilede forsøk';
comment on column PROSESS_TASK.BLOKKERT_AV is 'Id til ProsessTask som blokkerer kjøring av denne (når status=VETO)';
comment on column PO_STATSBORGERSKAP.TOM is 'Gyldig tom';
comment on column PO_STATSBORGERSKAP.STATSBORGERSKAP is 'Statsborgerskap (landkode ISO-3 country code)';
comment on column PO_STATSBORGERSKAP.PO_INFORMASJON_ID is 'FK:';
comment on column PO_STATSBORGERSKAP.ID is 'Primærnøkkel';
comment on column PO_STATSBORGERSKAP.FOM is 'Gyldig fom';
comment on column PO_STATSBORGERSKAP.AKTOER_ID is 'Akt�rid (fra NAV Akt�rregister)';
comment on column PO_RELASJON.TIL_AKTOER_ID is 'Hva betyr dette?';
comment on column PO_RELASJON.RELASJONSROLLE is 'Type relasjon mellom to personer (eks. EKTE/BARN/MORA/FARA/MMOR, etc.)';
comment on column PO_RELASJON.PO_INFORMASJON_ID is 'FK:';
comment on column PO_RELASJON.ID is 'Primærnøkkel';
comment on column PO_RELASJON.HAR_SAMME_BOSTED is 'Indikerer om personene i relasjonen bor på samme adresse';
comment on column PO_RELASJON.FRA_AKTOER_ID is 'Hva betyr dette?';
comment on column PO_PERSONSTATUS.TOM is 'Gyldig tom';
comment on column PO_PERSONSTATUS.PO_INFORMASJON_ID is 'FK:';
comment on column PO_PERSONSTATUS.PERSONSTATUS is 'Personstatus (BOSA - Bosatt, UTVA - Utvandret, etc)';
comment on column PO_PERSONSTATUS.ID is 'Primærnøkkel';
comment on column PO_PERSONSTATUS.FOM is 'Gyldig fom';
comment on column PO_PERSONSTATUS.AKTOER_ID is 'Akt�rid (fra NAV Akt�rregister)';
comment on column PO_PERSONOPPLYSNING.SIVILSTAND_TYPE is 'Sivilstand (eks. EKTE/SAMB/ etc)';
comment on column PO_PERSONOPPLYSNING.REGION is 'Geopolitisk region - eks NORGE / NORDEN / EØS person anses tilknyttet';
comment on column PO_PERSONOPPLYSNING.PO_INFORMASJON_ID is 'FK:';
comment on column PO_PERSONOPPLYSNING.NAVN is 'Navn';
comment on column PO_PERSONOPPLYSNING.ID is 'Primærnøkkel';
comment on column PO_PERSONOPPLYSNING.FOEDSELSDATO is 'Fødselsdato';
comment on column PO_PERSONOPPLYSNING.DOEDSDATO is 'Dødsdato (nullable)';
comment on column PO_PERSONOPPLYSNING.BRUKER_KJOENN is 'Person kjønn';
comment on column PO_PERSONOPPLYSNING.AKTOER_ID is 'Akt�rid (fra NAV Akt�rregister)';
comment on column PO_INFORMASJON.VERSJON is 'Angir versjon for optimistisk låsing';
comment on column PO_INFORMASJON.ID is 'Primærnøkkel';
comment on column PO_ADRESSE.TOM is 'Gyldig tom';
comment on column PO_ADRESSE.POSTSTED is 'Poststed';
comment on column PO_ADRESSE.POSTNUMMER is 'Postnummer';
comment on column PO_ADRESSE.PO_INFORMASJON_ID is 'FK:';
comment on column PO_ADRESSE.LAND is 'Land';
comment on column PO_ADRESSE.ID is 'Primærnøkkel';
comment on column PO_ADRESSE.FOM is 'Gyldig fom';
comment on column PO_ADRESSE.AKTOER_ID is 'Akt�rid (fra NAV Akt�rregister)';
comment on column PO_ADRESSE.ADRESSELINJE4 is 'Adresselinje 4';
comment on column PO_ADRESSE.ADRESSELINJE3 is 'Adresse linje';
comment on column PO_ADRESSE.ADRESSELINJE2 is 'Adresse linje';
comment on column PO_ADRESSE.ADRESSELINJE1 is 'Adresse linje (not null)';
comment on column PO_ADRESSE.ADRESSE_TYPE is 'Fremmednøkkel til kodeverkstabell for oversikt over adressetyper';
comment on column OPPTJENING_AKTIVITET.REFERANSE_TYPE is 'Type referanse for opptjening (orgnr, privat arbeidsgiver aktørId)';
comment on column OPPTJENING_AKTIVITET.OPPTJENINGSPERIODE_ID is 'FK:';
comment on column OPPTJENING_AKTIVITET.KLASSIFISERING is 'Klassifisering av anvendelse av aktivitet for angitt periode (godkjent, avvist, antatt godkjent)';
comment on column OPPTJENING_AKTIVITET.ID is 'Primary Key';
comment on column OPPTJENING_AKTIVITET.FOM is 'Aktivitet gyldig til-og-med dato';
comment on column OPPTJENING_AKTIVITET.AKTIVITET_TYPE is 'Type aktivitet som har inngått i vurdering av opptjening';
comment on column OPPTJENING_AKTIVITET.AKTIVITET_REFERANSE is 'En referanse (spesifikk ifht. aktivitet_type) som skilles ulike innslag av samme aktivitet for samme periode (eks. Virksomhetsnummer for aktivitet av type ARBEID)';
comment on column OPPTJENING.VILKAR_RESULTAT_ID is 'FK:VILKAR_RESULTAT';
comment on column OPPTJENING.OPPTJENT_PERIODE is 'Mengden opptjening vurdert som godkjent av opptjeningsvilkåret';
comment on column OPPTJENING.ID is 'Primary Key';
comment on column OPPGAVE_BEHANDLING_KOBLING.SAKSNUMMER is 'Saksnummer (som GSAK har mottatt)';
comment on column OPPGAVE_BEHANDLING_KOBLING.OPPGAVE_ID is 'FK:';
comment on column OPPGAVE_BEHANDLING_KOBLING.OPPGAVE_AARSAK is 'FK:OPPGAVE_AARSAK Fremmednøkkel for kobling til kodeverkstabell for årsaken til at oppgaven er opprettet';
comment on column OPPGAVE_BEHANDLING_KOBLING.ID is 'Primary Key';
comment on column OPPGAVE_BEHANDLING_KOBLING.FERDIGSTILT_TID is 'Tidspunkt for når oppgave ble ferdigstilt.';
comment on column OPPGAVE_BEHANDLING_KOBLING.FERDIGSTILT_AV is 'Ident til den som har ferdigstilt oppgaven.';
comment on column OPPGAVE_BEHANDLING_KOBLING.FERDIGSTILT is 'Er oppgaven ferdigstilt.';
comment on column OPPGAVE_BEHANDLING_KOBLING.BEHANDLING_ID is 'FK:BEHANDLING Fremmednøkkel for kobling til behandling';
comment on column OPPDRAG_KONTROLL.VENTER_KVITTERING is 'om oppdragskvittering er mottatt eller ikke';
comment on column OPPDRAG_KONTROLL.SAKSNUMMER is 'Saksnummer i GSAK';
comment on column OPPDRAG_KONTROLL.PROSESS_TASK_ID is 'FK:PROSESS_TASK Fremmednøkkel for knyttning til logging av prosesstask som ???';
comment on column OPPDRAG_KONTROLL.ID is 'Primary Key';
comment on column OPPDRAG_KONTROLL.BEHANDLING_ID is 'FK:BEHANDLING Fremmednøkkel for kobling til behandling';
comment on column MOTTATT_HENDELSE.HENDELSE_UID is 'Unik identifikator for hendelse mottatt';
comment on column MOTTATT_DOKUMENT.XML_PAYLOAD is 'Strukturert informasjon fra det mottatte dokumentet';
comment on column MOTTATT_DOKUMENT.TYPE is 'FK:DOKUMENT_TYPE Fremmednøkkel for kobling til dokumenttype';
comment on column MOTTATT_DOKUMENT.MOTTATT_TIDSPUNKT is 'Arkiveringstidspunkt for journalposten';
comment on column MOTTATT_DOKUMENT.MOTTATT_DATO is 'Mottatt dato';
comment on column MOTTATT_DOKUMENT.KANALREFERANSE is 'Kildereferanse for journalposten';
comment on column MOTTATT_DOKUMENT.JOURNALPOST_ID is 'FK: Journalpostens ID i JOARK';
comment on column MOTTATT_DOKUMENT.JOURNAL_ENHET is 'Journalførende enhet fra forside dersom satt';
comment on column MOTTATT_DOKUMENT.ID is 'Primary Key';
comment on column MOTTATT_DOKUMENT.FORSENDELSE_ID is 'Unik ID for forsendelsen';
comment on column MOTTATT_DOKUMENT.FAGSAK_ID is 'FK: Fremmednøkkel til Fagsak';
comment on column MOTTATT_DOKUMENT.ELEKTRONISK_REGISTRERT is 'Elektronisk registrert søknad';
comment on column MOTTATT_DOKUMENT.DOKUMENT_KATEGORI is 'Dokumentkategori';
comment on column MOTTATT_DOKUMENT.BEHANDLING_ID is 'FK:BEHANDLING Fremmednøkkel for kobling til behandling';
comment on column MEDLEMSKAP_VURDERING_PERIODE.ID is 'Primær nøkkel for medlemskapvurdering_periode';
comment on column MEDLEMSKAP_VURDERING_LOPENDE.VURDERT_PERIODE_ID is 'Peker til koblingstabell';
comment on column MEDLEMSKAP_VURDERING_LOPENDE.VURDERINGSDATO is 'Vurderingsdato';
comment on column MEDLEMSKAP_VURDERING_LOPENDE.OPPHOLDSRETT_VURDERING is 'Om søker har oppholdsrett for vurderingsdato';
comment on column MEDLEMSKAP_VURDERING_LOPENDE.MANUELL_VURD is 'Manuell vurderingstype';
comment on column MEDLEMSKAP_VURDERING_LOPENDE.LOVLIG_OPPHOLD_VURDERING is 'Om søker har oppholdsrett for vurderingsdato';
comment on column MEDLEMSKAP_VURDERING_LOPENDE.ID is 'Timestamp som forteller nå transaksjonen inntraff. ';
comment on column MEDLEMSKAP_VURDERING_LOPENDE.ER_EOS_BORGER is 'Om søker er EØS borger for vurderingsdato';
comment on column MEDLEMSKAP_VURDERING_LOPENDE.BOSATT_VURDERING is 'Om søker er bosatt for vurderingsdato';
comment on column MEDLEMSKAP_VURDERING_LOPENDE.BEGRUNNELSE is 'Begrunnelsen til saksbehandleren';
comment on column MEDLEMSKAP_VURDERING.OPPHOLDSRETT_VURDERING is 'True hvis søker har oppholdsrett';
comment on column MEDLEMSKAP_VURDERING.MEDLEMSPERIODE_MANUELL_VURD is 'FK:MEDLEMSKAP_MANUELL_VURD De mulige valgene for manuell vurdering av medlemsperiodene';
comment on column MEDLEMSKAP_VURDERING.LOVLIG_OPPHOLD_VURDERING is 'True hvis søker har lovlig opphold';
comment on column MEDLEMSKAP_VURDERING.ID is 'Primary Key';
comment on column MEDLEMSKAP_VURDERING.FOM is 'FOM dato for vurderingen';
comment on column MEDLEMSKAP_VURDERING.ER_EOS_BORGER is 'Er personen EØS-borger?';
comment on column MEDLEMSKAP_VURDERING.BOSATT_VURDERING is 'True hvis søker er bosatt';
comment on column MEDLEMSKAP_VURDERING.BEGRUNNELSE is 'Begrunnelsen til saksbehandleren';
comment on column MEDLEMSKAP_VILKAR_PERIODER.VURDERINGSDATO is 'Vurdingsdato for medlemskapvilkåret';
comment on column MEDLEMSKAP_VILKAR_PERIODER.VILKAR_UTFALL_MERKNAD is 'Kode for vilkår utfall merknad';
comment on column MEDLEMSKAP_VILKAR_PERIODER.VILKAR_UTFALL is 'Utfallet av medlemskapsvilkåret i den angitte perioden';
comment on column MEDLEMSKAP_VILKAR_PERIODER.TOM is 'Til og med dato';
comment on column MEDLEMSKAP_VILKAR_PERIODER.MEDLEMSKAP_VILKAR_PERIODE_ID is 'FK:MEDLEMSKAP_VILKAR_PERIODE Fremmednøkkel til periodenes aggregat';
comment on column MEDLEMSKAP_VILKAR_PERIODER.ID is 'Primærnøkkel';
comment on column MEDLEMSKAP_VILKAR_PERIODER.FOM is 'Fra og med dato';
comment on column MEDLEMSKAP_VILKAR_PERIODE.OVERSTYRT_UTFALL is 'Vilkår utfall type';
comment on column MEDLEMSKAP_VILKAR_PERIODE.OVERSTYRINGSDATO is 'Overstyringsdato for medlemskapvilkåret';
comment on column MEDLEMSKAP_VILKAR_PERIODE.ID is 'Primærnøkkel';
comment on column MEDLEMSKAP_VILKAR_PERIODE.AVSLAGSARSAK is 'Avslagsårsak';
comment on column MEDLEMSKAP_REGISTRERT.ID is 'Primærnøkkel';
comment on column MEDLEMSKAP_PERIODER.TOM is 'Til og med dato';
comment on column MEDLEMSKAP_PERIODER.STUDIE_LAND is 'FK:LANDKODER';
comment on column MEDLEMSKAP_PERIODER.MEDLEMSKAP_TYPE is 'FK:MEDLEMSKAP_TYPE Type periode: ENDELIG, FORELØPIG eller AVKLARES';
comment on column MEDLEMSKAP_PERIODER.MEDLEMSKAP_REGISTRERT_ID is 'FK:MEDLEMSKAP_REGISTRERT Fremmednøkkel til tabellen for registrert medlemskap fra MEDL';
comment on column MEDLEMSKAP_PERIODER.MEDL_ID is 'Unik ID i MEDL for perioden';
comment on column MEDLEMSKAP_PERIODER.LOVVALG_LAND is 'FK:LANDKODER';
comment on column MEDLEMSKAP_PERIODER.KILDE_TYPE is 'FK:MEDLEMSKAP_KILDE Angir kilden for informasjonen om medlemskap';
comment on column MEDLEMSKAP_PERIODER.ID is 'Primary Key';
comment on column MEDLEMSKAP_PERIODER.FOM is 'Fra og med dato';
comment on column MEDLEMSKAP_PERIODER.ER_MEDLEM is 'True hvis periode med medlemskap';
comment on column MEDLEMSKAP_PERIODER.DEKNING_TYPE is 'FK:MEDLEMSKAP_DEKNING Hva slags dekning som ligger i perioden - ofte en referanse til en lovhjemmel';
comment on column MEDLEMSKAP_PERIODER.BESLUTNINGSDATO is 'Beslutningsdato';
comment on column MEDLEMSKAP_OPPG_TILKNYT.OPPHOLD_NAA is 'Nåværende opphold i Norge';
comment on column MEDLEMSKAP_OPPG_TILKNYT.OPPGITT_DATO is 'Datoen opplysningen ble oppgitt';
comment on column MEDLEMSKAP_OPPG_TILKNYT.ID is 'Primary Key';
comment on column MEDLEMSKAP_OPPG_LAND.TIDLIGERE_OPPHOLD is 'Tidligere opphold i Norge (boolsk). Ja = Tidligere, Nei = Fremtidig';
comment on column MEDLEMSKAP_OPPG_LAND.PERIODE_TOM is 'Sluttdato for utenlandsopphold';
comment on column MEDLEMSKAP_OPPG_LAND.PERIODE_FOM is 'Startdato for utenlandsopphold';
comment on column MEDLEMSKAP_OPPG_LAND.MEDLEMSKAP_OPPG_TILKNYT_ID is 'FK:MEDLEMSKAP_OPPG_TILKNYT Som er koblingstabellen mellom hver enkelt oppgitt tilknytning og søknaden';
comment on column MEDLEMSKAP_OPPG_LAND.LAND is 'FK:LANDKODER Landet for den oppgitte tilknytningen';
comment on column MEDLEMSKAP_OPPG_LAND.ID is 'Primary Key';
comment on column LAGRET_VEDTAK.XML_CLOB is 'Vedtak XML.';
comment on column LAGRET_VEDTAK.ID is 'Primary Key';
comment on column LAGRET_VEDTAK.FAGSAK_ID is 'FK:FAGSAK Fremmednøkkel for kobling til fagsak';
comment on column LAGRET_VEDTAK.BEHANDLING_ID is 'FK:BEHANDLING Fremmednøkkel for kobling til behandling';
comment on column JOURNALPOST.JOURNALPOST_ID is 'Journalpost-id';
comment on column JOURNALPOST.ID is 'Primary Key';
comment on column JOURNALPOST.FAGSAK_ID is 'FK:FAGSAK Fremmednøkkel for kobling til fagsak';
comment on column HISTORIKKINNSLAG_FELT.TIL_VERDI_KODE is 'Feltets nye verdi. Kun kodeverk';
comment on column HISTORIKKINNSLAG_FELT.TIL_VERDI is 'Feltets nye verdi. Kun string';
comment on column HISTORIKKINNSLAG_FELT.SEKVENS_NR is 'Settes dersom historikkinnslagdelen har flere innslag med samme navn';
comment on column HISTORIKKINNSLAG_FELT.NAVN_VERDI is 'Verdi som skal brukes som del av feltets navn';
comment on column HISTORIKKINNSLAG_FELT.NAVN is 'Navn på felt. Gjelder for endrede verdier og opplysninger';
comment on column HISTORIKKINNSLAG_FELT.KL_TIL_VERDI is 'Kodeverk for til_verdi';
comment on column HISTORIKKINNSLAG_FELT.KL_NAVN is 'Kodeverk anvn';
comment on column HISTORIKKINNSLAG_FELT.KL_FRA_VERDI is 'Kodeverk for fra_verdi';
comment on column HISTORIKKINNSLAG_FELT.ID is 'Primærnøkkel';
comment on column HISTORIKKINNSLAG_FELT.HISTORIKKINNSLAG_FELT_TYPE is 'Hva slags type informasjon som er representert';
comment on column HISTORIKKINNSLAG_FELT.HISTORIKKINNSLAG_DEL_ID is 'FK:';
comment on column HISTORIKKINNSLAG_FELT.FRA_VERDI_KODE is 'Feltets gamle verdi. Kun kodeverk';
comment on column HISTORIKKINNSLAG_FELT.FRA_VERDI is 'Feltets gamle verdi. Kun string';
comment on column HISTORIKKINNSLAG_DOK_LINK.LINK_TEKST is 'Tekst som vises for link til dokumentet';
comment on column HISTORIKKINNSLAG_DOK_LINK.JOURNALPOST_ID is 'FK';
comment on column HISTORIKKINNSLAG_DOK_LINK.ID is 'Primary Key';
comment on column HISTORIKKINNSLAG_DOK_LINK.HISTORIKKINNSLAG_ID is 'FK:HISTORIKKINNSLAG Fremmednøkkel til riktig innslag i historikktabellen';
comment on column HISTORIKKINNSLAG_DOK_LINK.DOKUMENT_ID is 'FK:';
comment on column HISTORIKKINNSLAG_DEL.ID is 'Primærnøkkel';
comment on column HISTORIKKINNSLAG_DEL.HISTORIKKINNSLAG_ID is 'FK:HISTORIKKINNSLAG Fremmednøkkel til riktig innslag i historikktabellen';
comment on column HISTORIKKINNSLAG.UUID is 'Unik UUID for historikkinnslag til utvortes bruk, kan være generert eksternt hvis innslaget kommer fra et annet system';
comment on column HISTORIKKINNSLAG.OPPRETTET_I_SYSTEM is 'Hvilket system historikkinnslaget er generert i';
comment on column HISTORIKKINNSLAG.ID is 'Primary Key';
comment on column HISTORIKKINNSLAG.HISTORIKKINNSLAG_TYPE is 'Fremmednøkkel til beskrivelse av historikkinnslaget';
comment on column HISTORIKKINNSLAG.HISTORIKK_TID is 'Når innslaget ble opprettet i opprinnelig system';
comment on column HISTORIKKINNSLAG.HISTORIKK_AKTOER_ID is 'FK:HISTORIKK_AKTOER Fremmednøkkel til';
comment on column HISTORIKKINNSLAG.FAGSAK_ID is 'FK:FAGSAK Fremmednøkkel for kobling til fagsak';
comment on column HISTORIKKINNSLAG.BRUKER_KJOENN is 'FK:BRUKER_KJOENN Fremmednøkkel til kodeverkstabellen som viser mulige kjønn for bruker og viser til brukerens kjønn';
comment on column HISTORIKKINNSLAG.BEHANDLING_ID is 'FK: BEHANDLING Fremmednøkkel for kobling til behandling';
comment on column GR_SOEKNAD.SOEKNAD_ID is 'FK:';
comment on column GR_SOEKNAD.ID is 'Primærnøkkel';
comment on column GR_SOEKNAD.BEHANDLING_ID is 'FK: BEHANDLING Fremmednøkkel for kobling til behandling';
comment on column GR_PERSONOPPLYSNING.REGISTRERT_INFORMASJON_ID is 'FK:';
comment on column GR_PERSONOPPLYSNING.OVERSTYRT_INFORMASJON_ID is 'FK:';
comment on column GR_PERSONOPPLYSNING.ID is 'Primærnøkkel';
comment on column GR_PERSONOPPLYSNING.BEHANDLING_ID is 'FK: BEHANDLING Fremmednøkkel for kobling til behandling';
comment on column GR_MEDLEMSKAP_VILKAR_PERIODE.VILKAR_RESULTAT_ID is 'FK: Fremmednøkkel for kobling til vilkårsresultat';
comment on column GR_MEDLEMSKAP_VILKAR_PERIODE.MEDLEMSKAP_VILKAR_PERIODE_ID is 'FK: Fremmednøkkel for kobling til aggregat medlemskap_vilkar_periode';
comment on column GR_MEDLEMSKAP_VILKAR_PERIODE.ID is 'Primærnøkkel';
comment on column GR_MEDLEMSKAP.VURDERING_LOPENDE_ID is 'Peker på vurdering av løpende medlemskap';
comment on column GR_MEDLEMSKAP.VURDERING_ID is 'FK:';
comment on column GR_MEDLEMSKAP.REGISTRERT_ID is 'FK:';
comment on column GR_MEDLEMSKAP.OPPGITT_ID is 'FK:';
comment on column GR_MEDLEMSKAP.BEHANDLING_ID is 'FK: BEHANDLING Fremmednøkkel for kobling til behandling';
comment on column GR_BEREGNINGSGRUNNLAG.STEG_OPPRETTET is 'Hvilket steg eller vurderingspunkt grunnlaget ble opprettet i';
comment on column GR_BEREGNINGSGRUNNLAG.REGISTER_AKTIVITETER_ID is 'Aktiviteter relevant for beregning før saksbehandlers vurdering';
comment on column GR_BEREGNINGSGRUNNLAG.ID is 'Primary Key';
comment on column GR_BEREGNINGSGRUNNLAG.BR_OVERSTYRINGER_ID is 'Overstyringer av refusjon';
comment on column GR_BEREGNINGSGRUNNLAG.BEREGNINGSGRUNNLAG_ID is 'FK:BEREGNINGSGRUNNLAG Fremmednøkkel til tabell som knytter beregningsgrunnlagforekomsten til behandling';
comment on column GR_BEREGNINGSGRUNNLAG.BEHANDLING_ID is 'FK: BEHANDLING Fremmednøkkel for kobling til behandling';
comment on column GR_BEREGNINGSGRUNNLAG.BA_OVERSTYRINGER_ID is 'Overstyringer av beregningaktiviteter';
comment on column FAGSAK_PROSESS_TASK.PROSESS_TASK_ID is 'FK: Fremmednøkkel for knyttning til logging av prosesstask som ???';
comment on column FAGSAK_PROSESS_TASK.ID is 'Primærnøkkel';
comment on column FAGSAK_PROSESS_TASK.GRUPPE_SEKVENSNR is 'For en gitt fagsak angir hvilken rekkefølge task skal kjøres.  Kun tasks med laveste gruppe_sekvensnr vil kjøres. Når disse er FERDIG vil de ryddes bort og neste med lavest sekvensnr kan kjøres (gitt at den er KLAR)';
comment on column FAGSAK_PROSESS_TASK.FAGSAK_ID is 'FK: Fremmednøkkel for kobling til fagsak';
comment on column FAGSAK_PROSESS_TASK.BEHANDLING_ID is 'FK: Fremmednøkkel for kobling til behandling';
comment on column FAGSAK.YTELSE_TYPE is 'Fremmednøkkel til kodeverkstabellen som inneholder oversikt over ytelser';
comment on column FAGSAK.TIL_INFOTRYGD is 'J hvis saken må behandles av Infotrygd';
comment on column FAGSAK.SAKSNUMMER is 'Saksnummer (som GSAK har mottatt)';
comment on column FAGSAK.ID is 'Primary Key';
comment on column FAGSAK.FAGSAK_STATUS is 'FK:FAGSAK_STATUS Fremmednøkkel til kodeverkstabellen som inneholder oversikten over fagstatuser';
comment on column FAGSAK.BRUKER_ID is 'FK:BRUKER Fremmednøkkel til brukertabellen';
comment on column ETTERKONTROLL.OPPRETTET_TID is 'Tidspunkt rad opprettet.';
comment on column ETTERKONTROLL.OPPRETTET_AV is 'Hvem opprettet rad.';
comment on column ETTERKONTROLL.KONTROLL_TYPE is 'Kontrolltype kode kode som angir årsak til registrering for etterkontroll.';
comment on column ETTERKONTROLL.KONTROLL_TID is 'Skjæringspunkt for når kontroll skal inntreffe.';
comment on column ETTERKONTROLL.ID is 'Primary key';
comment on column ETTERKONTROLL.FAGSAK_ID is 'FK: kobling til fagsak.';
comment on column ETTERKONTROLL.ENDRET_TID is 'Tidspunkt når rad ble endret.';
comment on column ETTERKONTROLL.ENDRET_AV is 'Hvem har endret rad.';
comment on column ETTERKONTROLL.BEHANDLET is 'Statusfelt. N indikerer at raden ikke er etterkontrollert.';
comment on column BRUKER.SPRAK_KODE is 'FK:SPRAAK_KODE Fremmednøkkel til kodeverkstabellen som viser språk som er støttet og viser til brukerens foretrukne språk';
comment on column BRUKER.ID is 'Primary Key';
comment on column BRUKER.AKTOER_ID is 'Aktørid utstedt av Nav Aktørregister for en Bruker (eks. Søker)';
comment on column BR_SATS.VERDI is 'Sats verdi.';
comment on column BR_SATS.TOM is 'Gyldig Til-Og-Med';
comment on column BR_SATS.SATS_TYPE is 'FK:SATS_TYPE Fremmednøkkel til tabell for beskrivelse av satstyper i beregning';
comment on column BR_SATS.ID is 'Primary Key';
comment on column BR_SATS.FOM is 'Gyldig Fra-Og-Med';
comment on column BR_RESULTAT_BEHANDLING.UTBET_BEREGNINGSRESULTAT_FP_ID is 'FK: BEREGNINGSRESULTAT_FP. Tilkjent ytelse til utbetaling';
comment on column BR_RESULTAT_BEHANDLING.ID is 'Primary Key';
comment on column BR_RESULTAT_BEHANDLING.HINDRE_TILBAKETREKK is 'Definerer om tilbaketrekk av tidligere stønad skal hindres. null dersom det ikke er tatt stilling til av saksbehandler.';
comment on column BR_RESULTAT_BEHANDLING.BG_BEREGNINGSRESULTAT_FP_ID is 'FK: BEREGNINGSRESULTAT_FP. Tilkjent ytelse basert på beregningsgrunnlag';
comment on column BR_RESULTAT_BEHANDLING.BEHANDLING_ID is 'FK:BEHANDLING';
comment on column BR_PERIODE.ID is 'Primærnøkkel';
comment on column BR_PERIODE.BR_PERIODE_TOM is 'Siste dag i periode for tilkjent ytelse';
comment on column BR_PERIODE.BR_PERIODE_FOM is 'Første dag i periode for tilkjent ytelse';
comment on column BR_PERIODE.BEREGNINGSRESULTAT_FP_ID is 'Fremmednøkkel til tabell som knytter beregningsresultperioden til beregningsresultatet';
comment on column BR_FERIEPENGER_PR_AAR.OPPTJENINGSAAR is '31/12 i opptjeningsåret, dvs året før feriepengene utbetales';
comment on column BR_FERIEPENGER_PR_AAR.ID is 'Primær nøkkel';
comment on column BR_FERIEPENGER_PR_AAR.BR_FERIEPENGER_ID is 'FK:BR_FERIEPENGER';
comment on column BR_FERIEPENGER_PR_AAR.BEREGNINGSRESULTAT_ANDEL_ID is 'FK:BEREGNINGSRESULTAT_ANDEL';
comment on column BR_FERIEPENGER_PR_AAR.AARSBELOEP is 'Årsbeløp som skal utbetales, avrundet';
comment on column BR_FERIEPENGER.ID is 'Primær nøkkel';
comment on column BR_FERIEPENGER.FERIEPENGER_REGEL_SPORING is 'Logg fra regel (clob)';
comment on column BR_FERIEPENGER.FERIEPENGER_REGEL_INPUT is 'Input til regel (clob)';
comment on column BR_FERIEPENGER.FERIEPENGER_PERIODE_TOM is 'Siste dag i brukers feriepengeperiode';
comment on column BR_FERIEPENGER.FERIEPENGER_PERIODE_FOM is 'Første dag i brukers feriepengeperiode';
comment on column BR_FERIEPENGER.BEREGNINGSRESULTAT_FP_ID is 'FK: BEREGNINGSRESULTAT_FP';
comment on column BR_BEREGNINGSRESULTAT.REGEL_SPORING is 'Logg fra beregningsregel for tilkjent ytelse, JSON';
comment on column BR_BEREGNINGSRESULTAT.REGEL_INPUT is 'Input til beregningsregel for tilkjent ytelse, JSON';
comment on column BR_BEREGNINGSRESULTAT.ID is 'Primærnøkkel';
comment on column BR_BEREGNINGSRESULTAT.ENDRINGSDATO is 'Endringsdato for beregningsresultat.';
comment on column BR_ANDEL.UTBETALINGSGRAD is 'Uttaksgrad';
comment on column BR_ANDEL.STILLINGSPROSENT is 'Stillingsprosent';
comment on column BR_ANDEL.INNTEKTSKATEGORI is 'Inntektskategori for andelen';
comment on column BR_ANDEL.ID is 'Primærnøkkel';
comment on column BR_ANDEL.DAGSATS_FRA_BG is 'Dagsats fra beregningsgrunnlag';
comment on column BR_ANDEL.DAGSATS is 'Dagsats for tilkjent ytelse';
comment on column BR_ANDEL.BRUKER_ER_MOTTAKER is 'Angir om bruker eller arbeidsgiver er mottaker';
comment on column BR_ANDEL.BR_PERIODE_ID is 'Fremmednøkkel til tabell som knytter beregningsresultatandelen til en beregningsgrunnlagsperiode';
comment on column BR_ANDEL.ARBEIDSGIVER_ORGNR is 'Organisasjonsnummer for arbeidsgivere som er virksomheter';
comment on column BR_ANDEL.ARBEIDSGIVER_AKTOR_ID is 'Arbeidsgivers aktør id.';
comment on column BR_ANDEL.ARBEIDSFORHOLD_TYPE is 'Typekode for arbeidstakeraktivitet som ikke er tilknyttet noen virksomhet';
comment on column BR_ANDEL.ARBEIDSFORHOLD_INTERN_ID is 'Globalt unikt arbeidsforhold id generert for arbeidsgiver/arbeidsforhold. I motsetning til arbeidsforhold_ekstern_id som holder arbeidsgivers referanse';
comment on column BR_ANDEL.AKTIVITET_STATUS is 'Aktivitetstatus for andelen';
comment on column BG_SG_PR_STATUS.SAMMENLIGNINGSPERIODE_TOM is 'Tom-dato for sammenligningsperiode';
comment on column BG_SG_PR_STATUS.SAMMENLIGNINGSPERIODE_FOM is 'Fom-dato for sammenligningsperiode';
comment on column BG_SG_PR_STATUS.SAMMENLIGNINGSGRUNNLAG_TYPE is 'Type av sammenligningsgrunnlag';
comment on column BG_SG_PR_STATUS.RAPPORTERT_PR_AAR is 'Rapportert inntekt pr aar i for gitt status';
comment on column BG_SG_PR_STATUS.BEREGNINGSGRUNNLAG_ID is 'FK: BEREGNINGSGRUNNLAG';
comment on column BG_SG_PR_STATUS.AVVIK_PROMILLE is 'Avvik promille';
comment on column BG_REGEL_SPORING.REGEL_TYPE is 'Hvilken regel det gjelder';
comment on column BG_REGEL_SPORING.REGEL_INPUT is 'Input til regelen';
comment on column BG_REGEL_SPORING.REGEL_EVALUERING is 'Regelevaluering/logging';
comment on column BG_REGEL_SPORING.ID is 'Primary Key';
comment on column BG_REGEL_SPORING.BG_ID is 'FK: Referanse til beregningsgrunnlag';
comment on column BG_REFUSJON_OVERSTYRING.ID is 'Primary Key';
comment on column BG_REFUSJON_OVERSTYRING.BR_OVERSTYRINGER_ID is 'Arbeidsgivers orgnr';
comment on column BG_REFUSJON_OVERSTYRING.ARBEIDSGIVER_ORGNR is 'Arbeidsgivers orgnr';
comment on column BG_REFUSJON_OVERSTYRING.ARBEIDSGIVER_AKTOR_ID is 'Arbeidsgivers aktør_id';
comment on column BG_PR_STATUS_OG_ANDEL.REDUSERT_REFUSJON_PR_AAR is 'Refusjon til arbeidsgiver, redusert';
comment on column BG_PR_STATUS_OG_ANDEL.REDUSERT_PR_AAR is 'Beregningsgrunnlag, redusert';
comment on column BG_PR_STATUS_OG_ANDEL.REDUSERT_BRUKERS_ANDEL_PR_AAR is 'Brukers andel, redusert';
comment on column BG_PR_STATUS_OG_ANDEL.PGI_SNITT is 'Gjennomsnittlig pensjonsgivende inntekt';
comment on column BG_PR_STATUS_OG_ANDEL.PGI3 is 'Pensjonsgivende inntekt i år 3';
comment on column BG_PR_STATUS_OG_ANDEL.PGI2 is 'Pensjonsgivende inntekt i år 2';
comment on column BG_PR_STATUS_OG_ANDEL.PGI1 is 'Pensjonsgivende inntekt i år 1';
comment on column BG_PR_STATUS_OG_ANDEL.OVERSTYRT_PR_AAR is 'Beregningsgrunnlagsandel, overstyrt';
comment on column BG_PR_STATUS_OG_ANDEL.NY_I_ARBEIDSLIVET is 'Oppgir om bruker er ny i arbeidslivet';
comment on column BG_PR_STATUS_OG_ANDEL.MAKSIMAL_REFUSJON_PR_AAR is 'Maksimalverdi for refusjon til arbeidsgiver';
comment on column BG_PR_STATUS_OG_ANDEL.LAGT_TIL_AV_SAKSBEHANDLER is 'Angir om andel er lagt til av saksbehandler manuelt';
comment on column BG_PR_STATUS_OG_ANDEL.INNTEKTSKATEGORI is 'FK:INNTEKTSKATEGORI Fremmednøkkel til tabell med oversikt over inntektskategorier';
comment on column BG_PR_STATUS_OG_ANDEL.ID is 'Primærnøkkel';
comment on column BG_PR_STATUS_OG_ANDEL.FORDELT_PR_AAR is 'Beregningsgrunnlagsandel etter fordeling';
comment on column BG_PR_STATUS_OG_ANDEL.FASTSATT_AV_SAKSBEHANDLER is 'Angir om inntekt er fastsatt manuelt av saksbehandler';
comment on column BG_PR_STATUS_OG_ANDEL.DAGSATS_TILSTOETENDE_YTELSE is 'Original dagsats fra tilstøtende ytelse AAP/Dagpenger';
comment on column BG_PR_STATUS_OG_ANDEL.DAGSATS_BRUKER is 'Dagsats til bruker';
comment on column BG_PR_STATUS_OG_ANDEL.DAGSATS_ARBEIDSGIVER is 'Dagsats til arbeidsgiver';
comment on column BG_PR_STATUS_OG_ANDEL.BRUTTO_PR_AAR is 'Beregningsgrunnlagsandel, brutto';
comment on column BG_PR_STATUS_OG_ANDEL.BG_PERIODE_ID is 'FK: Fremmednøkkel til tabell som knytter beregningsgrunnlagsandelen til en beregningsgrunnlagperiode';
comment on column BG_PR_STATUS_OG_ANDEL.BESTEBEREGNING_PR_AAR is 'Inntekt fastsatt av saksbehandler ved besteberegning for fødende kvinne';
comment on column BG_PR_STATUS_OG_ANDEL.BEREGNINGSPERIODE_TOM is 'Siste dag i beregningsperiode';
comment on column BG_PR_STATUS_OG_ANDEL.BEREGNINGSPERIODE_FOM is 'Første dag i beregningsperiode';
comment on column BG_PR_STATUS_OG_ANDEL.BEREGNET_PR_AAR is 'Beregningsgrunnlagsandel, beregnet';
comment on column BG_PR_STATUS_OG_ANDEL.AVKORTET_REFUSJON_PR_AAR is 'Refusjon til arbeidsgiver, avkortet';
comment on column BG_PR_STATUS_OG_ANDEL.AVKORTET_PR_AAR is 'Beregningsgrunnlagsandel, avkortet';
comment on column BG_PR_STATUS_OG_ANDEL.AVKORTET_BRUKERS_ANDEL_PR_AAR is 'Brukers andel, avkortet';
comment on column BG_PR_STATUS_OG_ANDEL.ARBEIDSFORHOLD_TYPE is 'Typekode for arbeidstakeraktivitet som ikke er tilknyttet noen virksomhet';
comment on column BG_PR_STATUS_OG_ANDEL.ANDELSNR is 'Nummer for å identifisere andel innanfor ein periode';
comment on column BG_PR_STATUS_OG_ANDEL.AKTIVITET_STATUS is 'AktivitetStatus kodeverk';
comment on column BG_PR_STATUS_OG_ANDEL.AARSBELOEP_TILSTOETENDE_YTELSE is 'Årsbeløp for tilstøtende ytelse';
comment on column BG_PERIODE_REGEL_SPORING.REGEL_TYPE is 'Hvilken regel det gjelder';
comment on column BG_PERIODE_REGEL_SPORING.REGEL_INPUT is 'Input til regelen';
comment on column BG_PERIODE_REGEL_SPORING.REGEL_EVALUERING is 'Regelevaluering/logging';
comment on column BG_PERIODE_REGEL_SPORING.ID is 'Primary Key';
comment on column BG_PERIODE_REGEL_SPORING.BG_PERIODE_ID is 'FK: Referanse til beregningsgrunnlagperiode';
comment on column BG_PERIODE_AARSAK.PERIODE_AARSAK is 'Årsak til splitting av periode';
comment on column BG_PERIODE_AARSAK.ID is 'Primary Key';
comment on column BG_FRILANS_ANDEL.NYOPPSTARTET is 'Oppgir om bruker er nyoppstartet frilans';
comment on column BG_FRILANS_ANDEL.MOTTAR_YTELSE is 'Oppgir om bruker mottar ytelse for andel';
comment on column BG_FRILANS_ANDEL.BG_PR_STATUS_ANDEL_ID is 'FK: BG_PR_STATUS_OG_ANDEL';
comment on column BG_FAKTA_BER_TILFELLE.FAKTA_BEREGNING_TILFELLE is 'FK: FAKTA_OM_BEREGNING_TILFELLE';
comment on column BG_FAKTA_BER_TILFELLE.BEREGNINGSGRUNNLAG_ID is 'FK: BEREGNINGSGRUNNLAG';
comment on column BG_ARBEIDSTAKER_ANDEL.MOTTAR_YTELSE is 'Oppgir om bruker mottar ytelse for andel';
comment on column BG_ANDEL_ARBEIDSFORHOLD.TIDSBEGRENSET_ARBEIDSFORHOLD is 'Er arbeidsforholdet tidsbegrenset';
comment on column BG_ANDEL_ARBEIDSFORHOLD.REFUSJONSKRAV_PR_AAR is 'Arbeidsgivers refusjonskrav';
comment on column BG_ANDEL_ARBEIDSFORHOLD.NATURALYTELSE_TILKOMMET_PR_AAR is 'Verdi av tilkommet naturalytelse';
comment on column BG_ANDEL_ARBEIDSFORHOLD.NATURALYTELSE_BORTFALT_PR_AAR is 'Verdi av bortfalt naturalytelse';
comment on column BG_ANDEL_ARBEIDSFORHOLD.LOENNSENDRING_I_PERIODEN is 'Er det lønnsendring i beregningsperioden';
comment on column BG_ANDEL_ARBEIDSFORHOLD.BG_ANDEL_ID is 'Beregningsgrunnlagandelen arbeidsforholdet er knyttet til';
comment on column BG_ANDEL_ARBEIDSFORHOLD.ARBEIDSPERIODE_TOM is 'Til og med dato arbeidsperiode';
comment on column BG_ANDEL_ARBEIDSFORHOLD.ARBEIDSPERIODE_FOM is 'Fra og med dato arbeidsperiode';
comment on column BG_ANDEL_ARBEIDSFORHOLD.ARBEIDSGIVER_ORGNR is 'Organisasjonsnummer for arbeidsgivere som er virksomheter';
comment on column BG_ANDEL_ARBEIDSFORHOLD.ARBEIDSGIVER_AKTOR_ID is 'Arbeidsgivers aktør id.';
comment on column BG_ANDEL_ARBEIDSFORHOLD.ARBEIDSFORHOLD_INTERN_ID is 'Globalt unikt arbeidsforhold id generert for arbeidsgiver/arbeidsforhold. I motsetning til arbeidsforhold_ekstern_id som holder arbeidsgivers referanse';
comment on column BG_AKTIVITETER.SKJARINGSTIDSPUNKT_OPPTJENING is 'Skjæringstidspunkt for opptjening';
comment on column BG_AKTIVITET_STATUS.HJEMMEL is 'Hjemmel for beregningsgrunnlag';
comment on column BG_AKTIVITET_STATUS.BEREGNINGSGRUNNLAG_ID is 'Fremmednøkkel til tabell som knytter beregningsgrunnlagsaktivitetstatusen til et beregningsgrunnlag';
comment on column BG_AKTIVITET_STATUS.AKTIVITET_STATUS is 'AktivitetStatus kodeverk';
comment on column BG_AKTIVITET_OVERSTYRING.OPPTJENING_AKTIVITET_TYPE is 'Type aktivitet som har inngått i vurdering av opptjening';
comment on column BG_AKTIVITET_OVERSTYRING.ID is 'Primary Key';
comment on column BG_AKTIVITET_OVERSTYRING.HANDLING_TYPE is 'HandlingType kodeverk';
comment on column BG_AKTIVITET_OVERSTYRING.ARBEIDSGIVER_ORGNR is 'Arbeidsgivers orgnr';
comment on column BG_AKTIVITET_OVERSTYRING.ARBEIDSGIVER_AKTOR_ID is 'Arbeidsgivers aktør_id';
comment on column BG_AKTIVITET_OVERSTYRING.ARBEIDSFORHOLD_INTERN_ID is 'Globalt unikt arbeidsforhold id generert for arbeidsgiver/arbeidsforhold. I motsetning til arbeidsforhold_ekstern_id som holder arbeidsgivers referanse';
comment on column BG_AKTIVITET.OPPTJENING_AKTIVITET_TYPE is 'Type aktivitet som har inngått i vurdering av opptjening';
comment on column BG_AKTIVITET.ID is 'Primary Key';
comment on column BG_AKTIVITET.FOM is 'Aktiviteter relevant for beregning etter saksbehandlers vurdering';
comment on column BG_AKTIVITET.ARBEIDSGIVER_ORGNR is 'Organisasjonsnummer for arbeidsgivere som er virksomheter';
comment on column BG_AKTIVITET.ARBEIDSGIVER_AKTOR_ID is 'Arbeidsgivers aktør_id';
comment on column BG_AKTIVITET.ARBEIDSFORHOLD_INTERN_ID is 'Globalt unikt arbeidsforhold id generert for arbeidsgiver/arbeidsforhold. I motsetning til arbeidsforhold_ekstern_id som holder arbeidsgivers referanse';
comment on column BEREGNINGSGRUNNLAG_PERIODE.REGEL_INPUT_VILKAR is 'Input til beregningsregel for å vurdere beregningsvilkåret, JSON';
comment on column BEREGNINGSGRUNNLAG_PERIODE.REGEL_INPUT_OPPDATER_SVP is 'Input til beregningsregel som oppdaterer beregningsgrunnlag for søkt delvis SVP, JSON';
comment on column BEREGNINGSGRUNNLAG_PERIODE.REGEL_INPUT_FASTSETT_2 is 'Input til beregningsregel fastsett beregningsgrunnlag ved andre kjøring for SVP, JSON';
comment on column BEREGNINGSGRUNNLAG_PERIODE.REGEL_INPUT_FASTSETT is 'Input til beregningsregel fastsette beregningsgrunnlag, JSON';
comment on column BEREGNINGSGRUNNLAG_PERIODE.REGEL_INPUT is 'Input til beregningsregel foreslå beregningsgrunnlag, JSON';
comment on column BEREGNINGSGRUNNLAG_PERIODE.REGEL_EVALUERING_VILKAR is 'Logg fra beregningsregel som vurderer beregningsvilkåret, JSON';
comment on column BEREGNINGSGRUNNLAG_PERIODE.REGEL_EVALUERING_OPPDATER_SVP is 'Logg fra beregningsregel som oppdaterer beregningsgrunnlag for søkt delvis SVP, JSON';
comment on column BEREGNINGSGRUNNLAG_PERIODE.REGEL_EVALUERING_FASTSETT_2 is 'Logg fra beregningsregel fastsette beregningsgrunnlag etter andre kjøring for SVP, JSON';
comment on column BEREGNINGSGRUNNLAG_PERIODE.REGEL_EVALUERING_FASTSETT is 'Logg fra beregningsregel fastsette beregningsgrunnlag, JSON';
comment on column BEREGNINGSGRUNNLAG_PERIODE.REGEL_EVALUERING is 'Logg fra beregningsregel foreslå beregningsgrunnlag, JSON';
comment on column BEREGNINGSGRUNNLAG_PERIODE.REDUSERT_PR_AAR is 'Beregningsgrunnlag, redusert';
comment on column BEREGNINGSGRUNNLAG_PERIODE.ID is 'Primærnøkkel';
comment on column BEREGNINGSGRUNNLAG_PERIODE.DAGSATS is 'Dagsats, avrundet';
comment on column BEREGNINGSGRUNNLAG_PERIODE.BRUTTO_PR_AAR is 'Beregningsgrunnlag, brutto';
comment on column BEREGNINGSGRUNNLAG_PERIODE.BG_PERIODE_TOM is 'Siste gyldighetsdag for beregningsgrunnlag';
comment on column BEREGNINGSGRUNNLAG_PERIODE.BG_PERIODE_FOM is 'Første gyldighetsdag for beregningsgrunnlag';
comment on column BEREGNINGSGRUNNLAG_PERIODE.BEREGNINGSGRUNNLAG_ID is 'Fremmednøkkel til tabell som knytter beregningsgrunnlagsperioden til et beregningsgrunnlag';
comment on column BEREGNINGSGRUNNLAG_PERIODE.AVKORTET_PR_AAR is 'Avkortet beregningsgrunnlag';
comment on column BEREGNINGSGRUNNLAG.SKJARINGSTIDSPUNKT is 'Skjæringstidspunkt for beregning';
comment on column BEREGNINGSGRUNNLAG.REGELLOGG_SKJARINGSTIDSPUNKT is 'Logg fra beregningsregel for skjæringstidspunkt, JSON';
comment on column BEREGNINGSGRUNNLAG.REGELLOGG_BRUKERS_STATUS is 'Logg fra beregningsregel for brukers status, JSON';
comment on column BEREGNINGSGRUNNLAG.REGELINPUT_SKJARINGSTIDSPUNKT is 'Input til beregningsregel for skjæringstidspunkt, JSON';
comment on column BEREGNINGSGRUNNLAG.REGELINPUT_PERIODISERING is 'Input til regelen som periodiserer beregningsgrunnlag.';
comment on column BEREGNINGSGRUNNLAG.REGELINPUT_BRUKERS_STATUS is 'Input til beregningsregel for brukers status, JSON';
comment on column BEREGNINGSGRUNNLAG.OVERSTYRT is 'Oppgir om beregningsgrunnlaget er overstyrt ved faktaavklaring';
comment on column BEREGNINGSGRUNNLAG.ID is 'Primærnøkkel';
comment on column BEREGNINGSGRUNNLAG.GRUNNBELOEP is 'Grunnbeløp (G) ved opprinnelig_skjæringstidspunkt';
comment on column BEHANDLING_VEDTAK.VEDTAK_RESULTAT_TYPE is 'FK:VEDTAK_RESULTAT_TYPE Fremmednøkkel til tabellen som viser innholdet i vedtaket';
comment on column BEHANDLING_VEDTAK.VEDTAK_DATO is 'Vedtaksdato.';
comment on column BEHANDLING_VEDTAK.IVERKSETTING_STATUS is 'Status for iverksettingssteget';
comment on column BEHANDLING_VEDTAK.ID is 'Primary Key';
comment on column BEHANDLING_VEDTAK.BESLUTNING is 'Hvorvidt vedtaket er et beslutningsvedtak. Et beslutningsvedtak er et vedtak med samme utfall som forrige vedtak';
comment on column BEHANDLING_VEDTAK.BEHANDLING_RESULTAT_ID is 'FK:BEHANDLING_RESULTAT Fremmednøkkel til tabellen som viser behandlingsresultatet';
comment on column BEHANDLING_VEDTAK.ANSVARLIG_SAKSBEHANDLER is 'Ansvarlig saksbehandler som godkjente vedtaket.';
comment on column BEHANDLING_STEG_TILSTAND.ID is 'Primary Key';
comment on column BEHANDLING_STEG_TILSTAND.BEHANDLING_STEG_STATUS is 'Status på steg: (ved) INNGANG, STARTET, VENTER, (ved) UTGANG, UTFØRT';
comment on column BEHANDLING_STEG_TILSTAND.BEHANDLING_STEG is 'Hvilket BehandlingSteg som kjøres';
comment on column BEHANDLING_STEG_TILSTAND.BEHANDLING_ID is 'FK: BEHANDLING Fremmednøkkel for kobling til behandlingen dette steget er tilknyttet';
comment on column BEHANDLING_RESULTAT_YT_KONSEK.KONSEKVENS_YTELSE is 'FK: KONSEKVENS_FOR_YTELSEN';
comment on column BEHANDLING_RESULTAT_YT_KONSEK.BEHANDLING_RESULTAT_ID is 'FK: BEHANDLING_RESULTAT';
comment on column BEHANDLING_RESULTAT.VEDTAKSBREV is 'FK: VEDTAKSBREV';
comment on column BEHANDLING_RESULTAT.OVERSKRIFT is 'Overskrift felt brukt som hovedoverskrift i frikestbrev';
comment on column BEHANDLING_RESULTAT.INNGANGSVILKAR_RESULTAT_ID is 'FK: INNGANGSVILKAR_RESULTAT Fremmednøkkel til tabellen som viser de avklarte inngangsvilkårene som er grunnlaget for behandlingsresultatet';
comment on column BEHANDLING_RESULTAT.ID is 'Primary Key';
comment on column BEHANDLING_RESULTAT.FRITEKSTBREV is 'Fritekstbrev felt brukt som hovedoverskrift i frikestbrev';
comment on column BEHANDLING_RESULTAT.ENDRET_STOENADSKONTO is 'Behandlingen har endret stønadskonto';
comment on column BEHANDLING_RESULTAT.ENDRET_DEKNINGSGRAD is 'Behandlingen har endret dekningsgrad';
comment on column BEHANDLING_RESULTAT.BEREGNING_RESULTAT_ID is 'FK: BEREGNING_RESULTAT Fremmednøkkel til tabellen som inneholder beregningsresultatet';
comment on column BEHANDLING_RESULTAT.BEHANDLING_RESULTAT_TYPE is 'Resultat av behandlingen';
comment on column BEHANDLING_RESULTAT.BEHANDLING_ID is 'FK: BEHANDLING Fremmednøkkel for kobling til behandling';
comment on column BEHANDLING_RESULTAT.AVSLAG_ARSAK_FRITEKST is 'Begrunnelse for avslag av søknad.';
comment on column BEHANDLING_RESULTAT.AVSLAG_ARSAK is 'Årsakskode for avslag. Foreign key til AVSLAGSARSAK.';
comment on column BEHANDLING_OVERLAPP_INFOTRYGD.VL_TOM is 'Siste dato med tilkjent ytelse i VL';
comment on column BEHANDLING_OVERLAPP_INFOTRYGD.VL_FOM is 'Første dato med tilkjent ytelse i VL';
comment on column BEHANDLING_OVERLAPP_INFOTRYGD.SAKSNUMMER is 'FK: Fagsak.SAKSNUMMER';
comment on column BEHANDLING_OVERLAPP_INFOTRYGD.INFOTRYGD_TOM is 'Sluttdato for Infotrygdytelsen. Er tilsvarende Identdato fra Infotrygd.
';
comment on column BEHANDLING_OVERLAPP_INFOTRYGD.INFOTRYGD_FOM is 'Startdato for Infotrygdytelsen. Er tilsvarende Identdato fra Infotrygd.
';
comment on column BEHANDLING_OVERLAPP_INFOTRYGD.BEHANDLING_ID is 'FK: Behandling';
comment on column BEHANDLING_ARSAK.ORIGINAL_BEHANDLING_ID is 'FK: BEHANDLING Fremmednøkkel for kobling til behandlingen denne raden i tabellen hører til';
comment on column BEHANDLING_ARSAK.MANUELT_OPPRETTET is 'Angir om behandlingsårsaken oppstod når en behandling ble manuelt opprettet. Brukes til å utlede om behandlingen ble manuelt opprettet.';
comment on column BEHANDLING_ARSAK.ID is 'Primary Key';
comment on column BEHANDLING_ARSAK.BEHANDLING_ID is 'FK: BEHANDLING Fremmednøkkel for kobling til behandling';
comment on column BEHANDLING_ARSAK.BEHANDLING_ARSAK_TYPE is 'FK: BEHANDLING_ARSAK_TYPE Fremmednøkkel til oversikten over hvilke årsaker en behandling kan begrunnes med';
comment on column BEHANDLING.UUID is 'Unik UUID for behandling til utvortes bruk';
comment on column BEHANDLING.TOTRINNSBEHANDLING is 'Indikerer at behandlingen skal totrinnsbehandles';
comment on column BEHANDLING.STARTPUNKT_TYPE is 'Fremmednøkkel til tabellen som forteller startpunktet slik det er gitt av forretningshendelsen';
comment on column BEHANDLING.SIST_OPPDATERT_TIDSPUNKT is 'Beskriver når grunnlagene til behandling ble sist innhentet';
comment on column BEHANDLING.OPPRETTET_DATO is 'Dato når behandlingen ble opprettet.';
comment on column BEHANDLING.MIGRERT_KILDE is 'Hvilket fagsystem behandlingen er migrert fra';
comment on column BEHANDLING.ID is 'Primary Key';
comment on column BEHANDLING.FAGSAK_ID is 'FK: FAGSAK Fremmednøkkel for kobling til fagsak';
comment on column BEHANDLING.BEHANDLINGSTID_FRIST is 'Frist for når behandlingen skal være ferdig';
comment on column BEHANDLING.BEHANDLING_TYPE is 'FK: BEHANDLING_TYPE Fremmedøkkel til oversikten over hvilken behandlingstyper som finnes';
comment on column BEHANDLING.BEHANDLING_STATUS is 'FK: BEHANDLING_STATUS Fremmednøkkel til tabellen som viser status på behandlinger';
comment on column BEHANDLING.BEHANDLENDE_ENHET_NAVN is 'Navn på behandlende enhet';
comment on column BEHANDLING.BEHANDLENDE_ENHET_ARSAK is 'Fritekst for hvorfor behandlende enhet har blitt endret';
comment on column BEHANDLING.BEHANDLENDE_ENHET is 'NAV-enhet som behandler behandlingen';
comment on column BEHANDLING.AVSLUTTET_DATO is 'Dato når behandlingen ble avsluttet.';
comment on column BEHANDLING.ANSVARLIG_SAKSBEHANDLER is 'Id til saksbehandler som oppretter forslag til vedtak ved totrinnsbehandling.';
comment on column BEHANDLING.ANSVARLIG_BESLUTTER is 'Beslutter som har fattet vedtaket';
comment on column BEHANDLING.AAPNET_FOR_ENDRING is 'Flagget settes når menyvalget "Åpne behandling for endringer" kjøres.';
comment on column AKSJONSPUNKT.VENT_AARSAK is 'Årsak for at behandling er satt på vent';
comment on column AKSJONSPUNKT.TOTRINN_BEHANDLING is 'Indikerer at aksjonspunkter krever en totrinnsbehandling';
comment on column AKSJONSPUNKT.PERIODE_TOM is 'Angir sluttidspunkt dersom aksjonspunktet gjelder en spesifikk periode.';
comment on column AKSJONSPUNKT.PERIODE_FOM is 'Angir starttidspunkt dersom aksjonspunktet gjelder en spesifikk periode. Brukes for aksjonspunkt som kan repteres flere ganger for en behandling.';
comment on column AKSJONSPUNKT.MANUELT_OPPRETTET is 'Angir om aksjonspunktet ble opprettet manuelt. Typisk skjer dette ved overstyring, og når saksbehandler manuelt reaktiverer et historisk aksjonspunkt i en revurdering. Brukes når Behandlingskontroll skal rydde ved hopp.';
comment on column AKSJONSPUNKT.ID is 'Primary Key';
comment on column AKSJONSPUNKT.FRIST_TID is 'Behandling blir automatisk gjenopptatt etter dette tidspunktet';
comment on column AKSJONSPUNKT.BEHANDLING_STEG_FUNNET is 'Hvilket steg ble dette aksjonspunktet funnet i?';
comment on column AKSJONSPUNKT.BEHANDLING_ID is 'Fremmednøkkel for kobling til behandling';
comment on column AKSJONSPUNKT.BEGRUNNELSE is 'Begrunnelse for endringer gjort i forbindelse med aksjonspunktet.';
comment on column AKSJONSPUNKT.AKSJONSPUNKT_STATUS is 'FK:AKSJONSPUNKT_STATUS Fremmednøkkel til tabellen som inneholder status på aksjonspunktene';
comment on column AKSJONSPUNKT.AKSJONSPUNKT_DEF is 'Aksjonspunkt kode';
comment on column ABAKUS_INNHENTING_LOGG.GRUNNLAG_UUID is 'UUID til aktivt nytt grunnlag';
create sequence if not exists SEQ_PROSESS_TASK_GRUPPE increment by 50 minvalue 1000000;
create sequence if not exists SEQ_ABAKUS_INN_LOGG increment by 50 minvalue 1000000;
create sequence if not exists SEQ_AKSJONSPUNKT increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BEHANDLING increment by 50 minvalue 3000000;
create sequence if not exists SEQ_BEHANDLING_ARSAK increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BEHANDLING_RESULTAT increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BEHANDLING_RESULTAT_YT increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BEHANDLING_STEG_TILSTAND increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BEHANDLING_VEDTAK increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BEH_OVERLAPP_INFOTRYGD increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BEREGNINGSGRUNNLAG increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_AKTIVITET increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_AKTIVITETER increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_AKTIVITET_OVERSTYRING increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_AKTIVITET_OVERSTYRINGER increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_AKTIVITET_STATUS increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_ANDEL_ARBEIDSFORHOLD increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_ARBEIDSTAKER_ANDEL increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_FAKTA_BER_TILFELLE increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_FRILANS_ANDEL increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_PERIODE increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_PERIODE_AARSAK increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_PERIODE_REGEL_SPORING increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_PR_STATUS_OG_ANDEL increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_REFUSJON_OVERSTYRING increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_REFUSJON_OVERSTYRINGER increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_REGEL_SPORING increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BG_SG_PR_STATUS increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BRUKER increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BR_ANDEL increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BR_BEREGNINGSRESULTAT increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BR_FERIEPENGER increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BR_FERIEPENGER_PR_AAR increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BR_PERIODE increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BR_RESULTAT_BEHANDLING increment by 50 minvalue 1000000;
create sequence if not exists SEQ_BR_SATS increment by 50 minvalue 1000000;
create sequence if not exists SEQ_ETTERKONTROLL increment by 50 minvalue 1000000;
create sequence if not exists SEQ_FAGSAK increment by 50 minvalue 2000000;
create sequence if not exists SEQ_FAGSAK_PROSESS_TASK increment by 50 minvalue 1000000;
create sequence if not exists SEQ_GR_BEREGNINGSGRUNNLAG increment by 50 minvalue 1000000;
create sequence if not exists SEQ_GR_MEDLEMSKAP increment by 50 minvalue 1000000;
create sequence if not exists SEQ_GR_PERSONOPPLYSNING increment by 50 minvalue 1000000;
create sequence if not exists SEQ_GR_SOEKNAD increment by 50 minvalue 1000000;
create sequence if not exists SEQ_GR_YTELSES_FORDELING increment by 50 minvalue 1000000;
create sequence if not exists SEQ_HISTORIKKINNSLAG increment by 50 minvalue 1000000;
create sequence if not exists SEQ_HISTORIKKINNSLAG_DEL increment by 50 minvalue 1000000;
create sequence if not exists SEQ_HISTORIKKINNSLAG_DOK_LINK increment by 50 minvalue 1000000;
create sequence if not exists SEQ_HISTORIKKINNSLAG_FELT increment by 50 minvalue 1000000;
create sequence if not exists SEQ_JOURNALPOST increment by 50 minvalue 1000000;
create sequence if not exists SEQ_LAGRET_VEDTAK increment by 50 minvalue 1000000;
create sequence if not exists SEQ_MEDLEMSKAP increment by 50 minvalue 1000000;
create sequence if not exists SEQ_MEDLEMSKAP_OPPG_LAND increment by 50 minvalue 1000000;
create sequence if not exists SEQ_MEDLEMSKAP_OPPG_TILKNYT increment by 50 minvalue 1000000;
create sequence if not exists SEQ_MEDLEMSKAP_PERIODER increment by 50 minvalue 1000000;
create sequence if not exists SEQ_MEDLEMSKAP_REGISTRERT increment by 50 minvalue 1000000;
create sequence if not exists SEQ_MEDLEMSKAP_VILKAR_PERIODE increment by 50 minvalue 1000000;
create sequence if not exists SEQ_MEDLEMSKAP_VILKAR_PERIODER increment by 50 minvalue 1000000;
create sequence if not exists SEQ_MEDLEMSKAP_VL increment by 50 minvalue 1000000;
create sequence if not exists SEQ_MEDLEMSKAP_VP increment by 50 minvalue 1000000;
create sequence if not exists SEQ_MOTTATT_DOKUMENT increment by 50 minvalue 1000000;
create sequence if not exists SEQ_OPPDRAG_KONTROLL increment by 50 minvalue 1000000;
create sequence if not exists SEQ_OPPGAVE_BEHANDLING_KOBLING increment by 50 minvalue 1000000;
create sequence if not exists SEQ_OPPTJENING increment by 50 minvalue 1000000;
create sequence if not exists SEQ_OPPTJENING_AKTIVITET increment by 50 minvalue 1000000;
create sequence if not exists SEQ_PO_ADRESSE increment by 50 minvalue 1000000;
create sequence if not exists SEQ_PO_INFORMASJON increment by 50 minvalue 1000000;
create sequence if not exists SEQ_PO_PERSONOPPLYSNING increment by 50 minvalue 1000000;
create sequence if not exists SEQ_PO_PERSONSTATUS increment by 50 minvalue 1000000;
create sequence if not exists SEQ_PO_RELASJON increment by 50 minvalue 1000000;
create sequence if not exists SEQ_PO_STATSBORGERSKAP increment by 50 minvalue 1000000;
create sequence if not exists SEQ_PROSESS_TASK increment by 50 minvalue 1000000;
create sequence if not exists SEQ_RISIKOKLASSIFISERING increment by 50 minvalue 1000000;
create sequence if not exists SEQ_SAMMENLIGNINGSGRUNNLAG increment by 50 minvalue 1000000;
create sequence if not exists SEQ_SOEKNAD increment by 50 minvalue 1000000;
create sequence if not exists SEQ_SOEKNAD_VEDLEGG increment by 50 minvalue 1000000;
create sequence if not exists SEQ_TILBAKEKREVING_INNTREKK increment by 50 minvalue 1000000;
create sequence if not exists SEQ_TILBAKEKREVING_VALG increment by 50 minvalue 1000000;
create sequence if not exists SEQ_TOTRINNRESULTATGRUNNLAG increment by 50 minvalue 1000000;
create sequence if not exists SEQ_TOTRINNSVURDERING increment by 50 minvalue 1000000;
create sequence if not exists SEQ_UTTAK_RESULTAT increment by 50 minvalue 1000000;
create sequence if not exists SEQ_UTTAK_RESULTAT_PERIODE increment by 50 minvalue 1000000;
create sequence if not exists SEQ_UTTAK_RESULTAT_PERIODER increment by 50 minvalue 1000000;
create sequence if not exists SEQ_VILKAR increment by 50 minvalue 1000000;
create sequence if not exists SEQ_VILKAR_RESULTAT increment by 50 minvalue 1000000;
create sequence if not exists SEQ_VIRKSOMHET increment by 50 minvalue 1000000;
create sequence if not exists SEQ_VURDER_AARSAK_TTVURDERING increment by 50 minvalue 1000000;

