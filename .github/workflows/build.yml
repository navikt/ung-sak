name: Bygg og deploy

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.MD'
      - '.gitignore'
      - 'LICENCE'
      - 'CODEOWNERS'
      - 'dev/**'
env:
  IMAGE_BASE: docker.pkg.github.com/${{ github.repository }}/k9-sak
  CLUSTER: dev-fss
  NAMESPACE: default

jobs:
  build:
    name: Bygg
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12.1
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: init postgres
        run: |
          export PGPASSWORD='postgres'
          psql -h localhost -p 5432 -U 'postgres' <<EOSQL
            CREATE DATABASE k9sak_unit;
            CREATE USER k9sak_unit WITH PASSWORD 'k9sak_unit';
            GRANT ALL PRIVILEGES ON DATABASE k9sak_unit TO k9sak_unit;
            ALTER DATABASE k9sak_unit SET timezone TO 'Europe/Oslo';
            \connect k9sak_unit;
            create extension if not exists btree_gist;
          EOSQL
      - uses: actions/checkout@v2.3.1
      - uses: actions/setup-java@v1.4.0
        with:
          java-version: 1.11

      - name: Set cache key
        run: |
          echo "::set-env name=CACHE_KEY::$(date +%U)"
          echo "::set-env name=TIMESTAMP::$(date +%Y%m%d%H%M%S)"

      - uses: actions/cache@v2.1.0
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ env.CACHE_KEY }}

      - name: Build artifacts & deploy
        shell: bash
        run: |
          echo "Building artifacts $(echo $GITHUB_SHA | cut -c1-7)"
          mvn jacoco:prepare-agent deploy -e --batch-mode -DtrimStackTrace=false --file pom.xml -Dchangelist= -Dsha1=-$TIMESTAMP-$(echo $GITHUB_SHA | cut -c1-7) -Dfile.encoding=UTF-8 -Djacoco.destFile=$(pwd)/target/jacoco.exec
          # har ikke tilgang til sonarcloud sÃ¥lenge dette er private repo, kommenterer derfor ut neste linje
          # mvn jacoco:report sonar:sonar -e --batch-mode --file pom.xml -Djacoco.dataFile=$(pwd)/target/jacoco.exec -Dsonar.projectKey="navikt_k9-sak" -Dsonar.host.url='https://sonarcloud.io' -Dsonar.organization=navit -Dsonar.login=${SONAR_TOKEN}
          echo "Deployed artifacts"
          echo "::set-env name=TAG::$TIMESTAMP-$(echo $GITHUB_SHA | cut -c1-7)"
          echo "::set-env name=IMAGE::$IMAGE_BASE:$TIMESTAMP-$(echo $GITHUB_SHA | cut -c1-7)"
          echo "::set-env name=MVN_VERSION::$(mvn help:evaluate -e --batch-mode --file .flattened -Dexpression=project.version -q -DforceStdout)"
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_TOKEN: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_PASSWORD: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          DATASOURCE_HOST: localhost
          DATASOURCE_PORT: ${{ job.services.postgres.ports[5432] }} # get randomly assigned published port

      - name: Bygg og laste opp docker-image
        run: |
          docker build --tag ${IMAGE} --tag ${IMAGE_BASE}:latest --label "version=${TAG}" .
          echo "$GITHUB_ACCESS_TOKEN" | docker login --username "x-access-token" --password-stdin https://docker.pkg.github.com
          docker push ${IMAGE_BASE}:latest
          docker push ${IMAGE}
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_ACCESS_TOKEN }}

      - name: Lukk gamle issues
        uses: actions/github-script@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['deployment']
            }).then(response => {
              response.data.forEach(issue => {
                github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              });
            });

      - name: Opprett deployment issue
        if: success()
        uses: maxkomarychev/oction-create-issue@v0.7.1
        id: createdeployissue
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Deploy av ${{ env.TAG }}
          labels: deployment
          body: |
            Kommenter med <b>/promote cluster namespace</b>, hvor <b>cluster</b> er et gyldig clusternavn og <b>namespace</b> et eksisterende namespace i det clusteret.
            <table>
            <tr><th>Cluster</th><th>Namespace</th></tr>
            <tr><td>dev-fss</td><td>default</td></tr>
            <tr><td>prod-fss</td><td>default</td></tr>
            </table>

      - name: Trigger verdikjede test
        shell: bash
        run: |
          curl -XPOST -u "x-access-token:${{secrets.GITHUB_ACCESS_TOKEN}}" \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -H "Content-Type: application/json" \
          https://api.github.com/repos/navikt/k9-verdikjede/dispatches \
          --data '{"event_type": "saksbehandling-verdikjede",
                   "client_payload": {
                      "trigger": "${{ github.repository }}",
                      "version": "${{ env.TAG }}",
                      "image": "${{ env.IMAGE }}",
                      "issue_number": "${{ steps.createdeployissue.outputs.number }}"
                  }}'

      - name: Publiser Release Note
        id: create_release
        uses: actions/create-release@v1.1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.MVN_VERSION }}
          release_name: Release ${{ env.MVN_VERSION }}
          draft: false
          prerelease: false
